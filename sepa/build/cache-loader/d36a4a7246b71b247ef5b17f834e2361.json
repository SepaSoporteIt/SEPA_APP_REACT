{"remainingRequest":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\password\\password.tsx","dependencies":[{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\password\\password.tsx","mtime":1584152541796},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Button } from 'reactstrap';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { savePassword, reset } from './password.reducer';\r\nexport const PasswordPage = (props) => {\r\n    const [password, setPassword] = useState('');\r\n    useEffect(() => {\r\n        props.reset();\r\n        props.getSession();\r\n        return () => props.reset();\r\n    }, []);\r\n    const handleValidSubmit = (event, values) => {\r\n        props.savePassword(values.currentPassword, values.newPassword);\r\n    };\r\n    const updatePassword = event => setPassword(event.target.value);\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"8\" },\r\n                React.createElement(\"h2\", { id: \"password-title\" },\r\n                    React.createElement(Translate, { contentKey: \"password.title\", interpolate: { username: props.account.login } },\r\n                        \"Password for \",\r\n                        props.account.login)),\r\n                React.createElement(AvForm, { id: \"password-form\", onValidSubmit: handleValidSubmit },\r\n                    React.createElement(AvField, { name: \"currentPassword\", label: translate('global.form.currentpassword.label'), placeholder: translate('global.form.currentpassword.placeholder'), type: \"password\", validate: {\r\n                            required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') }\r\n                        } }),\r\n                    React.createElement(AvField, { name: \"newPassword\", label: translate('global.form.newpassword.label'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", validate: {\r\n                            required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n                            minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n                            maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\r\n                        }, onChange: updatePassword }),\r\n                    React.createElement(PasswordStrengthBar, { password: password }),\r\n                    React.createElement(AvField, { name: \"confirmPassword\", label: translate('global.form.confirmpassword.label'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\r\n                            required: {\r\n                                value: true,\r\n                                errorMessage: translate('global.messages.validate.confirmpassword.required')\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                errorMessage: translate('global.messages.validate.confirmpassword.minlength')\r\n                            },\r\n                            maxLength: {\r\n                                value: 50,\r\n                                errorMessage: translate('global.messages.validate.confirmpassword.maxlength')\r\n                            },\r\n                            match: {\r\n                                value: 'newPassword',\r\n                                errorMessage: translate('global.messages.error.dontmatch')\r\n                            }\r\n                        } }),\r\n                    React.createElement(Button, { color: \"success\", type: \"submit\" },\r\n                        React.createElement(Translate, { contentKey: \"password.form.button\" }, \"Save\")))))));\r\n};\r\nconst mapStateToProps = ({ authentication }) => ({\r\n    account: authentication.account,\r\n    isAuthenticated: authentication.isAuthenticated\r\n});\r\nconst mapDispatchToProps = { getSession, savePassword, reset };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordPage);\r\n",{"version":3,"file":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\password\\password.tsx","sourceRoot":"","sources":["C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\password\\password.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Button } from 'reactstrap';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { savePassword, reset } from './password.reducer';\r\n\r\nexport interface IUserPasswordProps extends StateProps, DispatchProps {}\r\n\r\nexport const PasswordPage = (props: IUserPasswordProps) => {\r\n  const [password, setPassword] = useState('');\r\n\r\n  useEffect(() => {\r\n    props.reset();\r\n    props.getSession();\r\n    return () => props.reset();\r\n  }, []);\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    props.savePassword(values.currentPassword, values.newPassword);\r\n  };\r\n\r\n  const updatePassword = event => setPassword(event.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h2 id=\"password-title\">\r\n            <Translate contentKey=\"password.title\" interpolate={{ username: props.account.login }}>\r\n              Password for {props.account.login}\r\n            </Translate>\r\n          </h2>\r\n          <AvForm id=\"password-form\" onValidSubmit={handleValidSubmit}>\r\n            <AvField\r\n              name=\"currentPassword\"\r\n              label={translate('global.form.currentpassword.label')}\r\n              placeholder={translate('global.form.currentpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') }\r\n              }}\r\n            />\r\n            <AvField\r\n              name=\"newPassword\"\r\n              label={translate('global.form.newpassword.label')}\r\n              placeholder={translate('global.form.newpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n                minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\r\n              }}\r\n              onChange={updatePassword}\r\n            />\r\n            <PasswordStrengthBar password={password} />\r\n            <AvField\r\n              name=\"confirmPassword\"\r\n              label={translate('global.form.confirmpassword.label')}\r\n              placeholder={translate('global.form.confirmpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: {\r\n                  value: true,\r\n                  errorMessage: translate('global.messages.validate.confirmpassword.required')\r\n                },\r\n                minLength: {\r\n                  value: 4,\r\n                  errorMessage: translate('global.messages.validate.confirmpassword.minlength')\r\n                },\r\n                maxLength: {\r\n                  value: 50,\r\n                  errorMessage: translate('global.messages.validate.confirmpassword.maxlength')\r\n                },\r\n                match: {\r\n                  value: 'newPassword',\r\n                  errorMessage: translate('global.messages.error.dontmatch')\r\n                }\r\n              }}\r\n            />\r\n            <Button color=\"success\" type=\"submit\">\r\n              <Translate contentKey=\"password.form.button\">Save</Translate>\r\n            </Button>\r\n          </AvForm>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authentication }: IRootState) => ({\r\n  account: authentication.account,\r\n  isAuthenticated: authentication.isAuthenticated\r\n});\r\n\r\nconst mapDispatchToProps = { getSession, savePassword, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PasswordPage);\r\n"]}]}