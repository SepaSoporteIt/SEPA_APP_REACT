{"remainingRequest":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\industry-type\\industry-type.reducer.ts","dependencies":[{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\industry-type\\industry-type.reducer.ts","mtime":1580568107491},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nimport { cleanEntity } from 'app/shared/util/entity-utils';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\nimport { defaultValue } from 'app/shared/model/industry-type.model';\r\nexport const ACTION_TYPES = {\r\n    SEARCH_INDUSTRYTYPES: 'industryType/SEARCH_INDUSTRYTYPES',\r\n    FETCH_INDUSTRYTYPE_LIST: 'industryType/FETCH_INDUSTRYTYPE_LIST',\r\n    FETCH_INDUSTRYTYPE: 'industryType/FETCH_INDUSTRYTYPE',\r\n    CREATE_INDUSTRYTYPE: 'industryType/CREATE_INDUSTRYTYPE',\r\n    UPDATE_INDUSTRYTYPE: 'industryType/UPDATE_INDUSTRYTYPE',\r\n    DELETE_INDUSTRYTYPE: 'industryType/DELETE_INDUSTRYTYPE',\r\n    RESET: 'industryType/RESET'\r\n};\r\nconst initialState = {\r\n    loading: false,\r\n    errorMessage: null,\r\n    entities: [],\r\n    entity: defaultValue,\r\n    updating: false,\r\n    totalItems: 0,\r\n    updateSuccess: false\r\n};\r\n// Reducer\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REQUEST(ACTION_TYPES.SEARCH_INDUSTRYTYPES):\r\n        case REQUEST(ACTION_TYPES.FETCH_INDUSTRYTYPE_LIST):\r\n        case REQUEST(ACTION_TYPES.FETCH_INDUSTRYTYPE):\r\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, loading: true });\r\n        case REQUEST(ACTION_TYPES.CREATE_INDUSTRYTYPE):\r\n        case REQUEST(ACTION_TYPES.UPDATE_INDUSTRYTYPE):\r\n        case REQUEST(ACTION_TYPES.DELETE_INDUSTRYTYPE):\r\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, updating: true });\r\n        case FAILURE(ACTION_TYPES.SEARCH_INDUSTRYTYPES):\r\n        case FAILURE(ACTION_TYPES.FETCH_INDUSTRYTYPE_LIST):\r\n        case FAILURE(ACTION_TYPES.FETCH_INDUSTRYTYPE):\r\n        case FAILURE(ACTION_TYPES.CREATE_INDUSTRYTYPE):\r\n        case FAILURE(ACTION_TYPES.UPDATE_INDUSTRYTYPE):\r\n        case FAILURE(ACTION_TYPES.DELETE_INDUSTRYTYPE):\r\n            return Object.assign({}, state, { loading: false, updating: false, updateSuccess: false, errorMessage: action.payload });\r\n        case SUCCESS(ACTION_TYPES.SEARCH_INDUSTRYTYPES):\r\n        case SUCCESS(ACTION_TYPES.FETCH_INDUSTRYTYPE_LIST):\r\n            return Object.assign({}, state, { loading: false, entities: action.payload.data, totalItems: parseInt(action.payload.headers['x-total-count'], 10) });\r\n        case SUCCESS(ACTION_TYPES.FETCH_INDUSTRYTYPE):\r\n            return Object.assign({}, state, { loading: false, entity: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.CREATE_INDUSTRYTYPE):\r\n        case SUCCESS(ACTION_TYPES.UPDATE_INDUSTRYTYPE):\r\n            return Object.assign({}, state, { updating: false, updateSuccess: true, entity: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.DELETE_INDUSTRYTYPE):\r\n            return Object.assign({}, state, { updating: false, updateSuccess: true, entity: {} });\r\n        case ACTION_TYPES.RESET:\r\n            return Object.assign({}, initialState);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nconst apiUrl = 'api/industry-types';\r\nconst apiSearchUrl = 'api/_search/industry-types';\r\n// Actions\r\nexport const getSearchEntities = (query, page, size, sort) => ({\r\n    type: ACTION_TYPES.SEARCH_INDUSTRYTYPES,\r\n    payload: axios.get(`${apiSearchUrl}?query=${query}${sort ? `&page=${page}&size=${size}&sort=${sort}` : ''}`)\r\n});\r\nexport const getEntities = (page, size, sort) => {\r\n    const requestUrl = `${apiUrl}${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\r\n    return {\r\n        type: ACTION_TYPES.FETCH_INDUSTRYTYPE_LIST,\r\n        payload: axios.get(`${requestUrl}${sort ? '&' : '?'}cacheBuster=${new Date().getTime()}`)\r\n    };\r\n};\r\nexport const getEntity = id => {\r\n    const requestUrl = `${apiUrl}/${id}`;\r\n    return {\r\n        type: ACTION_TYPES.FETCH_INDUSTRYTYPE,\r\n        payload: axios.get(requestUrl)\r\n    };\r\n};\r\nexport const createEntity = entity => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.CREATE_INDUSTRYTYPE,\r\n        payload: axios.post(apiUrl, cleanEntity(entity))\r\n    });\r\n    dispatch(getEntities());\r\n    return result;\r\n});\r\nexport const updateEntity = entity => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.UPDATE_INDUSTRYTYPE,\r\n        payload: axios.put(apiUrl, cleanEntity(entity))\r\n    });\r\n    dispatch(getEntities());\r\n    return result;\r\n});\r\nexport const deleteEntity = id => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const requestUrl = `${apiUrl}/${id}`;\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.DELETE_INDUSTRYTYPE,\r\n        payload: axios.delete(requestUrl)\r\n    });\r\n    dispatch(getEntities());\r\n    return result;\r\n});\r\nexport const reset = () => ({\r\n    type: ACTION_TYPES.RESET\r\n});\r\n",{"version":3,"file":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\industry-type\\industry-type.reducer.ts","sourceRoot":"","sources":["C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\industry-type\\industry-type.reducer.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { ICrudSearchAction, ICrudGetAction, ICrudGetAllAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\r\n\r\nimport { cleanEntity } from 'app/shared/util/entity-utils';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\n\r\nimport { IIndustryType, defaultValue } from 'app/shared/model/industry-type.model';\r\n\r\nexport const ACTION_TYPES = {\r\n  SEARCH_INDUSTRYTYPES: 'industryType/SEARCH_INDUSTRYTYPES',\r\n  FETCH_INDUSTRYTYPE_LIST: 'industryType/FETCH_INDUSTRYTYPE_LIST',\r\n  FETCH_INDUSTRYTYPE: 'industryType/FETCH_INDUSTRYTYPE',\r\n  CREATE_INDUSTRYTYPE: 'industryType/CREATE_INDUSTRYTYPE',\r\n  UPDATE_INDUSTRYTYPE: 'industryType/UPDATE_INDUSTRYTYPE',\r\n  DELETE_INDUSTRYTYPE: 'industryType/DELETE_INDUSTRYTYPE',\r\n  RESET: 'industryType/RESET'\r\n};\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  errorMessage: null,\r\n  entities: [] as ReadonlyArray<IIndustryType>,\r\n  entity: defaultValue,\r\n  updating: false,\r\n  totalItems: 0,\r\n  updateSuccess: false\r\n};\r\n\r\nexport type IndustryTypeState = Readonly<typeof initialState>;\r\n\r\n// Reducer\r\n\r\nexport default (state: IndustryTypeState = initialState, action): IndustryTypeState => {\r\n  switch (action.type) {\r\n    case REQUEST(ACTION_TYPES.SEARCH_INDUSTRYTYPES):\r\n    case REQUEST(ACTION_TYPES.FETCH_INDUSTRYTYPE_LIST):\r\n    case REQUEST(ACTION_TYPES.FETCH_INDUSTRYTYPE):\r\n      return {\r\n        ...state,\r\n        errorMessage: null,\r\n        updateSuccess: false,\r\n        loading: true\r\n      };\r\n    case REQUEST(ACTION_TYPES.CREATE_INDUSTRYTYPE):\r\n    case REQUEST(ACTION_TYPES.UPDATE_INDUSTRYTYPE):\r\n    case REQUEST(ACTION_TYPES.DELETE_INDUSTRYTYPE):\r\n      return {\r\n        ...state,\r\n        errorMessage: null,\r\n        updateSuccess: false,\r\n        updating: true\r\n      };\r\n    case FAILURE(ACTION_TYPES.SEARCH_INDUSTRYTYPES):\r\n    case FAILURE(ACTION_TYPES.FETCH_INDUSTRYTYPE_LIST):\r\n    case FAILURE(ACTION_TYPES.FETCH_INDUSTRYTYPE):\r\n    case FAILURE(ACTION_TYPES.CREATE_INDUSTRYTYPE):\r\n    case FAILURE(ACTION_TYPES.UPDATE_INDUSTRYTYPE):\r\n    case FAILURE(ACTION_TYPES.DELETE_INDUSTRYTYPE):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        updating: false,\r\n        updateSuccess: false,\r\n        errorMessage: action.payload\r\n      };\r\n    case SUCCESS(ACTION_TYPES.SEARCH_INDUSTRYTYPES):\r\n    case SUCCESS(ACTION_TYPES.FETCH_INDUSTRYTYPE_LIST):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        entities: action.payload.data,\r\n        totalItems: parseInt(action.payload.headers['x-total-count'], 10)\r\n      };\r\n    case SUCCESS(ACTION_TYPES.FETCH_INDUSTRYTYPE):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        entity: action.payload.data\r\n      };\r\n    case SUCCESS(ACTION_TYPES.CREATE_INDUSTRYTYPE):\r\n    case SUCCESS(ACTION_TYPES.UPDATE_INDUSTRYTYPE):\r\n      return {\r\n        ...state,\r\n        updating: false,\r\n        updateSuccess: true,\r\n        entity: action.payload.data\r\n      };\r\n    case SUCCESS(ACTION_TYPES.DELETE_INDUSTRYTYPE):\r\n      return {\r\n        ...state,\r\n        updating: false,\r\n        updateSuccess: true,\r\n        entity: {}\r\n      };\r\n    case ACTION_TYPES.RESET:\r\n      return {\r\n        ...initialState\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst apiUrl = 'api/industry-types';\r\nconst apiSearchUrl = 'api/_search/industry-types';\r\n\r\n// Actions\r\n\r\nexport const getSearchEntities: ICrudSearchAction<IIndustryType> = (query, page, size, sort) => ({\r\n  type: ACTION_TYPES.SEARCH_INDUSTRYTYPES,\r\n  payload: axios.get<IIndustryType>(`${apiSearchUrl}?query=${query}${sort ? `&page=${page}&size=${size}&sort=${sort}` : ''}`)\r\n});\r\n\r\nexport const getEntities: ICrudGetAllAction<IIndustryType> = (page, size, sort) => {\r\n  const requestUrl = `${apiUrl}${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\r\n  return {\r\n    type: ACTION_TYPES.FETCH_INDUSTRYTYPE_LIST,\r\n    payload: axios.get<IIndustryType>(`${requestUrl}${sort ? '&' : '?'}cacheBuster=${new Date().getTime()}`)\r\n  };\r\n};\r\n\r\nexport const getEntity: ICrudGetAction<IIndustryType> = id => {\r\n  const requestUrl = `${apiUrl}/${id}`;\r\n  return {\r\n    type: ACTION_TYPES.FETCH_INDUSTRYTYPE,\r\n    payload: axios.get<IIndustryType>(requestUrl)\r\n  };\r\n};\r\n\r\nexport const createEntity: ICrudPutAction<IIndustryType> = entity => async dispatch => {\r\n  const result = await dispatch({\r\n    type: ACTION_TYPES.CREATE_INDUSTRYTYPE,\r\n    payload: axios.post(apiUrl, cleanEntity(entity))\r\n  });\r\n  dispatch(getEntities());\r\n  return result;\r\n};\r\n\r\nexport const updateEntity: ICrudPutAction<IIndustryType> = entity => async dispatch => {\r\n  const result = await dispatch({\r\n    type: ACTION_TYPES.UPDATE_INDUSTRYTYPE,\r\n    payload: axios.put(apiUrl, cleanEntity(entity))\r\n  });\r\n  dispatch(getEntities());\r\n  return result;\r\n};\r\n\r\nexport const deleteEntity: ICrudDeleteAction<IIndustryType> = id => async dispatch => {\r\n  const requestUrl = `${apiUrl}/${id}`;\r\n  const result = await dispatch({\r\n    type: ACTION_TYPES.DELETE_INDUSTRYTYPE,\r\n    payload: axios.delete(requestUrl)\r\n  });\r\n  dispatch(getEntities());\r\n  return result;\r\n};\r\n\r\nexport const reset = () => ({\r\n  type: ACTION_TYPES.RESET\r\n});\r\n"]}]}