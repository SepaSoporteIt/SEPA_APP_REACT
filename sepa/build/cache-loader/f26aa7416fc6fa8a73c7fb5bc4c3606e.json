{"remainingRequest":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-update.tsx","dependencies":[{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-update.tsx","mtime":1584152541808},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Label, Row, Col } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\r\nexport const UserManagementUpdate = (props) => {\r\n    const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.login);\r\n    useEffect(() => {\r\n        if (isNew) {\r\n            props.reset();\r\n        }\r\n        else {\r\n            props.getUser(props.match.params.login);\r\n        }\r\n        props.getRoles();\r\n        return () => props.reset();\r\n    }, []);\r\n    const handleClose = () => {\r\n        props.history.push('/admin/user-management');\r\n    };\r\n    const saveUser = (event, values) => {\r\n        if (isNew) {\r\n            props.createUser(values);\r\n        }\r\n        else {\r\n            props.updateUser(values);\r\n        }\r\n        handleClose();\r\n    };\r\n    const isInvalid = false;\r\n    const { user, loading, updating, roles } = props;\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"8\" },\r\n                React.createElement(\"h1\", null,\r\n                    React.createElement(Translate, { contentKey: \"userManagement.home.createOrEditLabel\" }, \"Create or edit a User\")))),\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { onValidSubmit: saveUser },\r\n                user.id ? (React.createElement(AvGroup, null,\r\n                    React.createElement(Label, { for: \"id\" },\r\n                        React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\r\n                    React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true, value: user.id }))) : null,\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(Label, { for: \"login\" },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.login\" }, \"Login\")),\r\n                    React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"login\", validate: {\r\n                            required: {\r\n                                value: true,\r\n                                errorMessage: translate('register.messages.validate.login.required')\r\n                            },\r\n                            pattern: {\r\n                                value: '^[_.@A-Za-z0-9-]*$',\r\n                                errorMessage: translate('register.messages.validate.login.pattern')\r\n                            },\r\n                            minLength: {\r\n                                value: 1,\r\n                                errorMessage: translate('register.messages.validate.login.minlength')\r\n                            },\r\n                            maxLength: {\r\n                                value: 50,\r\n                                errorMessage: translate('register.messages.validate.login.maxlength')\r\n                            }\r\n                        }, value: user.login })),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(Label, { for: \"firstName\" },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.firstName\" }, \"First Name\")),\r\n                    React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"firstName\", validate: {\r\n                            maxLength: {\r\n                                value: 50,\r\n                                errorMessage: translate('entity.validation.maxlength', { max: 50 })\r\n                            }\r\n                        }, value: user.firstName })),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(Label, { for: \"lastName\" },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.lastName\" }, \"Last Name\")),\r\n                    React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"lastName\", validate: {\r\n                            maxLength: {\r\n                                value: 50,\r\n                                errorMessage: translate('entity.validation.maxlength', { max: 50 })\r\n                            }\r\n                        }, value: user.lastName }),\r\n                    React.createElement(AvFeedback, null, \"This field cannot be longer than 50 characters.\")),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(AvField, { name: \"email\", label: translate('global.form.email.label'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\r\n                            required: {\r\n                                value: true,\r\n                                errorMessage: translate('global.messages.validate.email.required')\r\n                            },\r\n                            email: {\r\n                                errorMessage: translate('global.messages.validate.email.invalid')\r\n                            },\r\n                            minLength: {\r\n                                value: 5,\r\n                                errorMessage: translate('global.messages.validate.email.minlength')\r\n                            },\r\n                            maxLength: {\r\n                                value: 254,\r\n                                errorMessage: translate('global.messages.validate.email.maxlength')\r\n                            }\r\n                        }, value: user.email })),\r\n                React.createElement(AvGroup, { check: true },\r\n                    React.createElement(Label, null,\r\n                        React.createElement(AvInput, { type: \"checkbox\", name: \"activated\", value: user.activated }),\r\n                        ' ',\r\n                        React.createElement(Translate, { contentKey: \"userManagement.activated\" }, \"Activated\"))),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(Label, { for: \"langKey\" },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.langKey\" }, \"Language Key\")),\r\n                    React.createElement(AvField, { type: \"select\", className: \"form-control\", name: \"langKey\", value: user.langKey }, locales.map(locale => (React.createElement(\"option\", { value: locale, key: locale }, languages[locale].name))))),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(Label, { for: \"authorities\" },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.profiles\" }, \"Language Key\")),\r\n                    React.createElement(AvInput, { type: \"select\", className: \"form-control\", name: \"authorities\", value: user.authorities, multiple: true }, roles.map(role => (React.createElement(\"option\", { value: role, key: role }, role))))),\r\n                React.createElement(Button, { tag: Link, to: \"/admin/user-management\", replace: true, color: \"info\" },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                    \"\\u00A0\",\r\n                    React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                        React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\r\n                \"\\u00A0\",\r\n                React.createElement(Button, { color: \"primary\", type: \"submit\", disabled: isInvalid || updating },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\r\n};\r\nconst mapStateToProps = (storeState) => ({\r\n    user: storeState.userManagement.user,\r\n    roles: storeState.userManagement.authorities,\r\n    loading: storeState.userManagement.loading,\r\n    updating: storeState.userManagement.updating\r\n});\r\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementUpdate);\r\n",{"version":3,"file":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-update.tsx","sourceRoot":"","sources":["C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Label, Row, Col } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport const UserManagementUpdate = (props: IUserManagementUpdateProps) => {\r\n  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.login);\r\n\r\n  useEffect(() => {\r\n    if (isNew) {\r\n      props.reset();\r\n    } else {\r\n      props.getUser(props.match.params.login);\r\n    }\r\n    props.getRoles();\r\n    return () => props.reset();\r\n  }, []);\r\n\r\n  const handleClose = () => {\r\n    props.history.push('/admin/user-management');\r\n  };\r\n\r\n  const saveUser = (event, values) => {\r\n    if (isNew) {\r\n      props.createUser(values);\r\n    } else {\r\n      props.updateUser(values);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  const isInvalid = false;\r\n  const { user, loading, updating, roles } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h1>\r\n            <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\r\n          </h1>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          {loading ? (\r\n            <p>Loading...</p>\r\n          ) : (\r\n            <AvForm onValidSubmit={saveUser}>\r\n              {user.id ? (\r\n                <AvGroup>\r\n                  <Label for=\"id\">\r\n                    <Translate contentKey=\"global.field.id\">ID</Translate>\r\n                  </Label>\r\n                  <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\r\n                </AvGroup>\r\n              ) : null}\r\n              <AvGroup>\r\n                <Label for=\"login\">\r\n                  <Translate contentKey=\"userManagement.login\">Login</Translate>\r\n                </Label>\r\n                <AvField\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"login\"\r\n                  validate={{\r\n                    required: {\r\n                      value: true,\r\n                      errorMessage: translate('register.messages.validate.login.required')\r\n                    },\r\n                    pattern: {\r\n                      value: '^[_.@A-Za-z0-9-]*$',\r\n                      errorMessage: translate('register.messages.validate.login.pattern')\r\n                    },\r\n                    minLength: {\r\n                      value: 1,\r\n                      errorMessage: translate('register.messages.validate.login.minlength')\r\n                    },\r\n                    maxLength: {\r\n                      value: 50,\r\n                      errorMessage: translate('register.messages.validate.login.maxlength')\r\n                    }\r\n                  }}\r\n                  value={user.login}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"firstName\">\r\n                  <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\r\n                </Label>\r\n                <AvField\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"firstName\"\r\n                  validate={{\r\n                    maxLength: {\r\n                      value: 50,\r\n                      errorMessage: translate('entity.validation.maxlength', { max: 50 })\r\n                    }\r\n                  }}\r\n                  value={user.firstName}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"lastName\">\r\n                  <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\r\n                </Label>\r\n                <AvField\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"lastName\"\r\n                  validate={{\r\n                    maxLength: {\r\n                      value: 50,\r\n                      errorMessage: translate('entity.validation.maxlength', { max: 50 })\r\n                    }\r\n                  }}\r\n                  value={user.lastName}\r\n                />\r\n                <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <AvField\r\n                  name=\"email\"\r\n                  label={translate('global.form.email.label')}\r\n                  placeholder={translate('global.form.email.placeholder')}\r\n                  type=\"email\"\r\n                  validate={{\r\n                    required: {\r\n                      value: true,\r\n                      errorMessage: translate('global.messages.validate.email.required')\r\n                    },\r\n                    email: {\r\n                      errorMessage: translate('global.messages.validate.email.invalid')\r\n                    },\r\n                    minLength: {\r\n                      value: 5,\r\n                      errorMessage: translate('global.messages.validate.email.minlength')\r\n                    },\r\n                    maxLength: {\r\n                      value: 254,\r\n                      errorMessage: translate('global.messages.validate.email.maxlength')\r\n                    }\r\n                  }}\r\n                  value={user.email}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup check>\r\n                <Label>\r\n                  <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} />{' '}\r\n                  <Translate contentKey=\"userManagement.activated\">Activated</Translate>\r\n                </Label>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"langKey\">\r\n                  <Translate contentKey=\"userManagement.langKey\">Language Key</Translate>\r\n                </Label>\r\n                <AvField type=\"select\" className=\"form-control\" name=\"langKey\" value={user.langKey}>\r\n                  {locales.map(locale => (\r\n                    <option value={locale} key={locale}>\r\n                      {languages[locale].name}\r\n                    </option>\r\n                  ))}\r\n                </AvField>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"authorities\">\r\n                  <Translate contentKey=\"userManagement.profiles\">Language Key</Translate>\r\n                </Label>\r\n                <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\r\n                  {roles.map(role => (\r\n                    <option value={role} key={role}>\r\n                      {role}\r\n                    </option>\r\n                  ))}\r\n                </AvInput>\r\n              </AvGroup>\r\n              <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n                <FontAwesomeIcon icon=\"arrow-left\" />\r\n                &nbsp;\r\n                <span className=\"d-none d-md-inline\">\r\n                  <Translate contentKey=\"entity.action.back\">Back</Translate>\r\n                </span>\r\n              </Button>\r\n              &nbsp;\r\n              <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\r\n                <FontAwesomeIcon icon=\"save\" />\r\n                &nbsp;\r\n                <Translate contentKey=\"entity.action.save\">Save</Translate>\r\n              </Button>\r\n            </AvForm>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user,\r\n  roles: storeState.userManagement.authorities,\r\n  loading: storeState.userManagement.loading,\r\n  updating: storeState.userManagement.updating\r\n});\r\n\r\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagementUpdate);\r\n"]}]}