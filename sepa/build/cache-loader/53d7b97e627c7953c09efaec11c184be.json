{"remainingRequest":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","dependencies":[{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","mtime":1583589029269},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Button } from 'reactstrap';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { handleRegister, reset } from './register.reducer';\r\nexport const RegisterPage = (props) => {\r\n    const [password, setPassword] = useState('');\r\n    useEffect(() => () => props.reset(), []);\r\n    const handleValidSubmit = (event, values) => {\r\n        props.handleRegister(values.username, values.email, values.firstPassword, props.currentLocale);\r\n        event.preventDefault();\r\n    };\r\n    const updatePassword = event => setPassword(event.target.value);\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"8\" },\r\n                React.createElement(\"h1\", { id: \"register-title\" },\r\n                    React.createElement(Translate, { contentKey: \"register.title\" }, \"Registration\")))),\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"8\" },\r\n                React.createElement(AvForm, { id: \"register-form\", onValidSubmit: handleValidSubmit },\r\n                    React.createElement(AvField, { name: \"username\", label: translate('global.form.username.label'), placeholder: translate('global.form.username.placeholder'), validate: {\r\n                            required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\r\n                            pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\r\n                            minLength: { value: 1, errorMessage: translate('register.messages.validate.login.minlength') },\r\n                            maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\r\n                        } }),\r\n                    React.createElement(AvField, { name: \"email\", label: translate('global.form.email.label'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\r\n                            required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\r\n                            minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\r\n                            maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\r\n                        } }),\r\n                    React.createElement(AvField, { name: \"firstPassword\", label: translate('global.form.newpassword.label'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", onChange: updatePassword, validate: {\r\n                            required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n                            minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n                            maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\r\n                        } }),\r\n                    React.createElement(PasswordStrengthBar, { password: password }),\r\n                    React.createElement(AvField, { name: \"secondPassword\", label: translate('global.form.confirmpassword.label'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\r\n                            required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\r\n                            minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\r\n                            maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\r\n                            match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\r\n                        } }),\r\n                    React.createElement(Button, { id: \"register-submit\", color: \"primary\", type: \"submit\" },\r\n                        React.createElement(Translate, { contentKey: \"register.form.button\" }, \"Register\")))))));\r\n};\r\nconst mapStateToProps = ({ locale }) => ({\r\n    currentLocale: locale.currentLocale\r\n});\r\nconst mapDispatchToProps = { handleRegister, reset };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\r\n",{"version":3,"file":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","sourceRoot":"","sources":["C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Alert, Button } from 'reactstrap';\r\n\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { handleRegister, reset } from './register.reducer';\r\n\r\nexport interface IRegisterProps extends StateProps, DispatchProps {}\r\n\r\nexport const RegisterPage = (props: IRegisterProps) => {\r\n  const [password, setPassword] = useState('');\r\n\r\n  useEffect(() => () => props.reset(), []);\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    props.handleRegister(values.username, values.email, values.firstPassword, props.currentLocale);\r\n    event.preventDefault();\r\n  };\r\n\r\n  const updatePassword = event => setPassword(event.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h1 id=\"register-title\">\r\n            <Translate contentKey=\"register.title\">Registration</Translate>\r\n          </h1>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <AvForm id=\"register-form\" onValidSubmit={handleValidSubmit}>\r\n            <AvField\r\n              name=\"username\"\r\n              label={translate('global.form.username.label')}\r\n              placeholder={translate('global.form.username.placeholder')}\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\r\n                pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\r\n                minLength: { value: 1, errorMessage: translate('register.messages.validate.login.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\r\n              }}\r\n            />\r\n            <AvField\r\n              name=\"email\"\r\n              label={translate('global.form.email.label')}\r\n              placeholder={translate('global.form.email.placeholder')}\r\n              type=\"email\"\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\r\n                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\r\n                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\r\n              }}\r\n            />\r\n            <AvField\r\n              name=\"firstPassword\"\r\n              label={translate('global.form.newpassword.label')}\r\n              placeholder={translate('global.form.newpassword.placeholder')}\r\n              type=\"password\"\r\n              onChange={updatePassword}\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n                minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\r\n              }}\r\n            />\r\n            <PasswordStrengthBar password={password} />\r\n            <AvField\r\n              name=\"secondPassword\"\r\n              label={translate('global.form.confirmpassword.label')}\r\n              placeholder={translate('global.form.confirmpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\r\n                minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\r\n                match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\r\n              }}\r\n            />\r\n            <Button id=\"register-submit\" color=\"primary\" type=\"submit\">\r\n              <Translate contentKey=\"register.form.button\">Register</Translate>\r\n            </Button>\r\n          </AvForm>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ locale }: IRootState) => ({\r\n  currentLocale: locale.currentLocale\r\n});\r\n\r\nconst mapDispatchToProps = { handleRegister, reset };\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(RegisterPage);\r\n"]}]}