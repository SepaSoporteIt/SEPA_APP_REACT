{"remainingRequest":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\company\\company-update.tsx","dependencies":[{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\company\\company-update.tsx","mtime":1588426126953},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, setFileData } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getEmployees } from 'app/entities/employee/employee.reducer';\r\nimport { getEntities as getIndustryTypes } from 'app/entities/industry-type/industry-type.reducer';\r\nimport { getEntities as getLocalidadandpartidos } from 'app/entities/localidadandpartido/localidadandpartido.reducer';\r\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './company.reducer';\r\nimport { convertDateTimeFromServer, convertDateTimeToServer, displayDefaultDateTime } from 'app/shared/util/date-utils';\r\nexport const CompanyUpdate = (props) => {\r\n    const [employeeId, setEmployeeId] = useState('0');\r\n    const [primIndustryTipeId, setPrimIndustryTipeId] = useState('0');\r\n    const [secIndustryTipeId, setSecIndustryTipeId] = useState('0');\r\n    const [localidadIdId, setLocalidadIdId] = useState('0');\r\n    const [partidoIdId, setPartidoIdId] = useState('0');\r\n    const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.id);\r\n    const { companyEntity, employees, industryTypes, localidadandpartidos, loading, updating } = props;\r\n    const { comment } = companyEntity;\r\n    const handleClose = () => {\r\n        props.history.push('/company');\r\n    };\r\n    useEffect(() => {\r\n        if (!isNew) {\r\n            props.getEntity(props.match.params.id);\r\n        }\r\n        props.getEmployees();\r\n        props.getIndustryTypes();\r\n        props.getLocalidadandpartidos();\r\n    }, []);\r\n    const onBlobChange = (isAnImage, name) => event => {\r\n        setFileData(event, (contentType, data) => props.setBlob(name, data, contentType), isAnImage);\r\n    };\r\n    const clearBlob = name => () => {\r\n        props.setBlob(name, undefined, undefined);\r\n    };\r\n    useEffect(() => {\r\n        if (props.updateSuccess) {\r\n            handleClose();\r\n        }\r\n    }, [props.updateSuccess]);\r\n    const saveEntity = (event, errors, values) => {\r\n        values.createdAt = convertDateTimeToServer(values.createdAt);\r\n        values.updatedAt = convertDateTimeToServer(values.updatedAt);\r\n        if (errors.length === 0) {\r\n            const entity = Object.assign({}, companyEntity, values);\r\n            if (isNew) {\r\n                props.createEntity(entity);\r\n            }\r\n            else {\r\n                props.updateEntity(entity);\r\n            }\r\n        }\r\n    };\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"8\" },\r\n                React.createElement(\"h2\", { id: \"sepaApp.company.home.createOrEditLabel\" },\r\n                    React.createElement(Translate, { contentKey: \"sepaApp.company.home.createOrEditLabel\" }, \"Create or edit a Company\")))),\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : companyEntity, onSubmit: saveEntity },\r\n                !isNew ? (React.createElement(AvGroup, null,\r\n                    React.createElement(Label, { for: \"company-id\" },\r\n                        React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\r\n                    React.createElement(AvInput, { id: \"company-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(\"h3\", null,\r\n                        React.createElement(Translate, { contentKey: \"sepaApp.company.detail.basicData\" }, \"Basic Data\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"nameLabel\", for: \"company-name\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.name\" }, \"Name\")),\r\n                        React.createElement(AvField, { id: \"company-name\", type: \"text\", name: \"name\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"fantasyNameLabel\", for: \"company-fantasyName\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.fantasyName\" }, \"Fantasy Name\")),\r\n                        React.createElement(AvField, { id: \"company-fantasyName\", type: \"text\", name: \"fantasyName\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"cuitLabel\", for: \"company-cuit\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.cuit\" }, \"Cuit\")),\r\n                        React.createElement(AvField, { id: \"company-cuit\", type: \"text\", name: \"cuit\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"company-employee\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.employee\" }, \"Employee\")),\r\n                        React.createElement(AvInput, { id: \"company-employee\", type: \"select\", className: \"form-control\", name: \"employee.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            employees\r\n                                ? employees.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.name + \" \" + otherEntity.surname)))\r\n                                : null))),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(\"h3\", null,\r\n                        React.createElement(Translate, { contentKey: \"sepaApp.company.detail.clientAddress\" }, \"Stablishment Address\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"addressDirectionLabel\", for: \"company-addressDirection\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.addressDirection\" }, \"Address Direction\")),\r\n                        React.createElement(AvField, { id: \"company-addressDirection\", type: \"text\", name: \"addressDirection\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"addressNumberLabel\", for: \"company-addressNumber\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.addressNumber\" }, \"Address Number\")),\r\n                        React.createElement(AvField, { id: \"company-addressNumber\", type: \"text\", name: \"addressNumber\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"betweenStreetsLabel\", for: \"company-betweenStreets\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.betweenStreets\" }, \"Between Streets\")),\r\n                        React.createElement(AvField, { id: \"company-betweenStreets\", type: \"text\", name: \"betweenStreets\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"floorLabel\", for: \"company-floor\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.floor\" }, \"Floor\")),\r\n                        React.createElement(AvField, { id: \"company-floor\", type: \"text\", name: \"floor\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"departamentLabel\", for: \"company-departament\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.departament\" }, \"Departament\")),\r\n                        React.createElement(AvField, { id: \"company-departament\", type: \"text\", name: \"departament\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"company-localidadId\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.localidadId\" }, \"Localidad Id\")),\r\n                        React.createElement(AvInput, { id: \"company-localidadId\", type: \"select\", className: \"form-control\", name: \"localidadId.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            localidadandpartidos\r\n                                ? localidadandpartidos.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.localidad)))\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"company-partidoId\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.partidoId\" }, \"Partido Id\")),\r\n                        React.createElement(AvInput, { id: \"company-partidoId\", type: \"select\", className: \"form-control\", name: \"partidoId.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            localidadandpartidos\r\n                                ? localidadandpartidos.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.partido)))\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"postalCodeLabel\", for: \"company-postalCode\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.postalCode\" }, \"Postal Code\")),\r\n                        React.createElement(AvField, { id: \"company-postalCode\", type: \"text\", name: \"postalCode\" }))),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(\"h3\", null,\r\n                        React.createElement(Translate, { contentKey: \"sepaApp.company.detail.contactData\" }, \"Contact Data\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"contactLabel\", for: \"company-contact\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.contact\" }, \"Contact\")),\r\n                        React.createElement(AvField, { id: \"company-contact\", type: \"text\", name: \"contact\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"tlfLabel\", for: \"company-tlf\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.tlf\" }, \"Tlf\")),\r\n                        React.createElement(AvField, { id: \"company-tlf\", type: \"text\", name: \"tlf\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"internalTlfLabel\", for: \"company-internalTlf\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.internalTlf\" }, \"Internal Tlf\")),\r\n                        React.createElement(AvField, { id: \"company-internalTlf\", type: \"text\", name: \"internalTlf\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"cellphoneLabel\", for: \"company-cellphone\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.cellphone\" }, \"Cellphone\")),\r\n                        React.createElement(AvField, { id: \"company-cellphone\", type: \"text\", name: \"cellphone\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"emailLabel\", for: \"company-email\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.email\" }, \"Email\")),\r\n                        React.createElement(AvField, { id: \"company-email\", type: \"text\", name: \"email\" }))),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(\"h3\", null,\r\n                        React.createElement(Translate, { contentKey: \"sepaApp.company.detail.afipActivity\" }, \"Activity stablished by AFIP\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"company-primIndustryTipe\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.primIndustryTipe\" }, \"Prim Industry Tipe\")),\r\n                        React.createElement(AvInput, { id: \"company-primIndustryTipe\", type: \"select\", className: \"form-control\", name: \"primIndustryTipe.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            industryTypes\r\n                                ? industryTypes.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.ciiu)))\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"company-secIndustryTipe\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.secIndustryTipe\" }, \"Sec Industry Tipe\")),\r\n                        React.createElement(AvInput, { id: \"company-secIndustryTipe\", type: \"select\", className: \"form-control\", name: \"secIndustryTipe.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            industryTypes\r\n                                ? industryTypes.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.ciiu)))\r\n                                : null))),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(\"h3\", null,\r\n                        React.createElement(Translate, { contentKey: \"sepaApp.company.detail.serviceData\" }, \"Service Data\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"visitsQtyMinLabel\", for: \"company-visitsQtyMin\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.visitsQtyMin\" }, \"Visits Qty Min\")),\r\n                        React.createElement(AvField, { id: \"company-visitsQtyMin\", type: \"string\", className: \"form-control\", name: \"visitsQtyMin\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"visitsQtyMaxLabel\", for: \"company-visitsQtyMax\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.visitsQtyMax\" }, \"Visits Qty Max\")),\r\n                        React.createElement(AvField, { id: \"company-visitsQtyMax\", type: \"string\", className: \"form-control\", name: \"visitsQtyMax\" })),\r\n                    React.createElement(AvGroup, { check: true },\r\n                        React.createElement(Label, { id: \"isSubscriptedLabel\" },\r\n                            React.createElement(AvInput, { id: \"company-isSubscripted\", type: \"checkbox\", className: \"form-check-input\", name: \"isSubscripted\" }),\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.isSubscripted\" }, \"Is Subscripted\")))),\r\n                React.createElement(AvGroup, null,\r\n                    React.createElement(\"h3\", null,\r\n                        React.createElement(Translate, { contentKey: \"sepaApp.company.detail.others\" }, \"Others\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"habPrimLabel\", for: \"company-habPrim\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.habPrim\" }, \"Hab Prim\")),\r\n                        React.createElement(AvField, { id: \"company-habPrim\", type: \"text\", name: \"habPrim\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"habSecLabel\", for: \"company-habSec\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.habSec\" }, \"Hab Sec\")),\r\n                        React.createElement(AvField, { id: \"company-habSec\", type: \"text\", name: \"habSec\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"commentLabel\", for: \"company-comment\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.comment\" }, \"Comment\")),\r\n                        React.createElement(AvInput, { id: \"company-comment\", type: \"textarea\", name: \"comment\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"createdAtLabel\", for: \"company-createdAt\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.createdAt\" }, \"Created At\")),\r\n                        React.createElement(AvInput, { id: \"company-createdAt\", type: \"datetime-local\", className: \"form-control\", name: \"createdAt\", placeholder: 'YYYY-MM-DD HH:mm', value: isNew ? displayDefaultDateTime() : convertDateTimeFromServer(props.companyEntity.createdAt) })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"updatedAtLabel\", for: \"company-updatedAt\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.company.updatedAt\" }, \"Updated At\")),\r\n                        React.createElement(AvInput, { id: \"company-updatedAt\", type: \"datetime-local\", className: \"form-control\", name: \"updatedAt\", placeholder: 'YYYY-MM-DD HH:mm', value: isNew ? displayDefaultDateTime() : convertDateTimeFromServer(props.companyEntity.updatedAt) }))),\r\n                React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/company\", replace: true, color: \"info\" },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                    \"\\u00A0\",\r\n                    React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                        React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\r\n                \"\\u00A0\",\r\n                React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\r\n};\r\nconst mapStateToProps = (storeState) => ({\r\n    employees: storeState.employee.entities,\r\n    industryTypes: storeState.industryType.entities,\r\n    localidadandpartidos: storeState.localidadandpartido.entities,\r\n    companyEntity: storeState.company.entity,\r\n    loading: storeState.company.loading,\r\n    updating: storeState.company.updating,\r\n    updateSuccess: storeState.company.updateSuccess\r\n});\r\nconst mapDispatchToProps = {\r\n    getEmployees,\r\n    getIndustryTypes,\r\n    getLocalidadandpartidos,\r\n    getEntity,\r\n    updateEntity,\r\n    setBlob,\r\n    createEntity,\r\n    reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanyUpdate);\r\n",{"version":3,"file":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\company\\company-update.tsx","sourceRoot":"","sources":["C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\company\\company-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvFeedback, AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, setFileData, byteSize, ICrudPutAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nimport { IEmployee } from 'app/shared/model/employee.model';\r\nimport { getEntities as getEmployees } from 'app/entities/employee/employee.reducer';\r\nimport { IIndustryType } from 'app/shared/model/industry-type.model';\r\nimport { getEntities as getIndustryTypes } from 'app/entities/industry-type/industry-type.reducer';\r\nimport { ILocalidadandpartido } from 'app/shared/model/localidadandpartido.model';\r\nimport { getEntities as getLocalidadandpartidos } from 'app/entities/localidadandpartido/localidadandpartido.reducer';\r\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './company.reducer';\r\nimport { ICompany } from 'app/shared/model/company.model';\r\nimport { convertDateTimeFromServer, convertDateTimeToServer, displayDefaultDateTime } from 'app/shared/util/date-utils';\r\nimport { mapIdList } from 'app/shared/util/entity-utils';\r\n\r\nexport interface ICompanyUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport const CompanyUpdate = (props: ICompanyUpdateProps) => {\r\n  const [employeeId, setEmployeeId] = useState('0');\r\n  const [primIndustryTipeId, setPrimIndustryTipeId] = useState('0');\r\n  const [secIndustryTipeId, setSecIndustryTipeId] = useState('0');\r\n  const [localidadIdId, setLocalidadIdId] = useState('0');\r\n  const [partidoIdId, setPartidoIdId] = useState('0');\r\n  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.id);\r\n\r\n  const { companyEntity, employees, industryTypes, localidadandpartidos, loading, updating } = props;\r\n\r\n  const { comment } = companyEntity;\r\n\r\n  const handleClose = () => {\r\n    props.history.push('/company');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isNew) {\r\n      props.getEntity(props.match.params.id);\r\n    }\r\n\r\n    props.getEmployees();\r\n    props.getIndustryTypes();\r\n    props.getLocalidadandpartidos();\r\n  }, []);\r\n\r\n  const onBlobChange = (isAnImage, name) => event => {\r\n    setFileData(event, (contentType, data) => props.setBlob(name, data, contentType), isAnImage);\r\n  };\r\n\r\n  const clearBlob = name => () => {\r\n    props.setBlob(name, undefined, undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.updateSuccess) {\r\n      handleClose();\r\n    }\r\n  }, [props.updateSuccess]);\r\n\r\n  const saveEntity = (event, errors, values) => {\r\n    values.createdAt = convertDateTimeToServer(values.createdAt);\r\n    values.updatedAt = convertDateTimeToServer(values.updatedAt);\r\n\r\n    if (errors.length === 0) {\r\n      const entity = {\r\n        ...companyEntity,\r\n        ...values\r\n      };\r\n\r\n      if (isNew) {\r\n        props.createEntity(entity);\r\n      } else {\r\n        props.updateEntity(entity);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h2 id=\"sepaApp.company.home.createOrEditLabel\">\r\n            <Translate contentKey=\"sepaApp.company.home.createOrEditLabel\">Create or edit a Company</Translate>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          {loading ? (\r\n            <p>Loading...</p>\r\n          ) : (\r\n            <AvForm model={isNew ? {} : companyEntity} onSubmit={saveEntity}>\r\n              {!isNew ? (\r\n                <AvGroup>\r\n                  <Label for=\"company-id\">\r\n                    <Translate contentKey=\"global.field.id\">ID</Translate>\r\n                  </Label>\r\n                  <AvInput id=\"company-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\r\n                </AvGroup>\r\n              ) : null}\r\n\r\n              <AvGroup>\r\n              <h3>\r\n                <Translate contentKey=\"sepaApp.company.detail.basicData\">Basic Data</Translate>\r\n              </h3>\r\n              <AvGroup>\r\n                <Label id=\"nameLabel\" for=\"company-name\">\r\n                  <Translate contentKey=\"sepaApp.company.name\">Name</Translate>\r\n                </Label>\r\n                <AvField\r\n                  id=\"company-name\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  validate={{\r\n                    required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                  }}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"fantasyNameLabel\" for=\"company-fantasyName\">\r\n                  <Translate contentKey=\"sepaApp.company.fantasyName\">Fantasy Name</Translate>\r\n                </Label>\r\n                <AvField id=\"company-fantasyName\" type=\"text\" name=\"fantasyName\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"cuitLabel\" for=\"company-cuit\">\r\n                  <Translate contentKey=\"sepaApp.company.cuit\">Cuit</Translate>\r\n                </Label>\r\n                <AvField\r\n                  id=\"company-cuit\"\r\n                  type=\"text\"\r\n                  name=\"cuit\"\r\n                  validate={{\r\n                    required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                  }}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"company-employee\">\r\n                  <Translate contentKey=\"sepaApp.company.employee\">Employee</Translate>\r\n                </Label>\r\n                <AvInput id=\"company-employee\" type=\"select\" className=\"form-control\" name=\"employee.id\">\r\n                  <option value=\"\" key=\"0\" />\r\n                  {employees\r\n                    ? employees.map(otherEntity => (\r\n                        <option value={otherEntity.id} key={otherEntity.id}>\r\n                          {otherEntity.name + \" \" + otherEntity.surname}\r\n                        </option>\r\n                      ))\r\n                    : null}\r\n                </AvInput>\r\n              </AvGroup>\r\n              </AvGroup>\r\n\r\n              <AvGroup>\r\n              <h3>\r\n                <Translate contentKey=\"sepaApp.company.detail.clientAddress\">Stablishment Address</Translate>\r\n              </h3>\r\n              <AvGroup>\r\n                <Label id=\"addressDirectionLabel\" for=\"company-addressDirection\">\r\n                  <Translate contentKey=\"sepaApp.company.addressDirection\">Address Direction</Translate>\r\n                </Label>\r\n                <AvField\r\n                  id=\"company-addressDirection\"\r\n                  type=\"text\"\r\n                  name=\"addressDirection\"\r\n                  validate={{\r\n                    required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                  }}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"addressNumberLabel\" for=\"company-addressNumber\">\r\n                  <Translate contentKey=\"sepaApp.company.addressNumber\">Address Number</Translate>\r\n                </Label>\r\n                <AvField\r\n                  id=\"company-addressNumber\"\r\n                  type=\"text\"\r\n                  name=\"addressNumber\"\r\n                  validate={{\r\n                    required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                  }}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"betweenStreetsLabel\" for=\"company-betweenStreets\">\r\n                  <Translate contentKey=\"sepaApp.company.betweenStreets\">Between Streets</Translate>\r\n                </Label>\r\n                <AvField id=\"company-betweenStreets\" type=\"text\" name=\"betweenStreets\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"floorLabel\" for=\"company-floor\">\r\n                  <Translate contentKey=\"sepaApp.company.floor\">Floor</Translate>\r\n                </Label>\r\n                <AvField id=\"company-floor\" type=\"text\" name=\"floor\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"departamentLabel\" for=\"company-departament\">\r\n                  <Translate contentKey=\"sepaApp.company.departament\">Departament</Translate>\r\n                </Label>\r\n                <AvField id=\"company-departament\" type=\"text\" name=\"departament\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"company-localidadId\">\r\n                  <Translate contentKey=\"sepaApp.company.localidadId\">Localidad Id</Translate>\r\n                </Label>\r\n                <AvInput id=\"company-localidadId\" type=\"select\" className=\"form-control\" name=\"localidadId.id\">\r\n                  <option value=\"\" key=\"0\" />\r\n                  {localidadandpartidos\r\n                    ? localidadandpartidos.map(otherEntity => (\r\n                        <option value={otherEntity.id} key={otherEntity.id}>\r\n                          {otherEntity.localidad}\r\n                        </option>\r\n                      ))\r\n                    : null}\r\n                </AvInput>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"company-partidoId\">\r\n                  <Translate contentKey=\"sepaApp.company.partidoId\">Partido Id</Translate>\r\n                </Label>\r\n                <AvInput id=\"company-partidoId\" type=\"select\" className=\"form-control\" name=\"partidoId.id\">\r\n                  <option value=\"\" key=\"0\" />\r\n                  {localidadandpartidos\r\n                    ? localidadandpartidos.map(otherEntity => (\r\n                        <option value={otherEntity.id} key={otherEntity.id}>\r\n                          {otherEntity.partido}\r\n                        </option>\r\n                      ))\r\n                    : null}\r\n                </AvInput>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"postalCodeLabel\" for=\"company-postalCode\">\r\n                  <Translate contentKey=\"sepaApp.company.postalCode\">Postal Code</Translate>\r\n                </Label>\r\n                <AvField id=\"company-postalCode\" type=\"text\" name=\"postalCode\" />\r\n              </AvGroup>\r\n              </AvGroup>\r\n\r\n              <AvGroup>\r\n              <h3>\r\n                <Translate contentKey=\"sepaApp.company.detail.contactData\">Contact Data</Translate>\r\n              </h3>\r\n              <AvGroup>\r\n                <Label id=\"contactLabel\" for=\"company-contact\">\r\n                  <Translate contentKey=\"sepaApp.company.contact\">Contact</Translate>\r\n                </Label>\r\n                <AvField id=\"company-contact\" type=\"text\" name=\"contact\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"tlfLabel\" for=\"company-tlf\">\r\n                  <Translate contentKey=\"sepaApp.company.tlf\">Tlf</Translate>\r\n                </Label>\r\n                <AvField id=\"company-tlf\" type=\"text\" name=\"tlf\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"internalTlfLabel\" for=\"company-internalTlf\">\r\n                  <Translate contentKey=\"sepaApp.company.internalTlf\">Internal Tlf</Translate>\r\n                </Label>\r\n                <AvField id=\"company-internalTlf\" type=\"text\" name=\"internalTlf\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"cellphoneLabel\" for=\"company-cellphone\">\r\n                  <Translate contentKey=\"sepaApp.company.cellphone\">Cellphone</Translate>\r\n                </Label>\r\n                <AvField id=\"company-cellphone\" type=\"text\" name=\"cellphone\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"emailLabel\" for=\"company-email\">\r\n                  <Translate contentKey=\"sepaApp.company.email\">Email</Translate>\r\n                </Label>\r\n                <AvField id=\"company-email\" type=\"text\" name=\"email\" />\r\n              </AvGroup>\r\n              </AvGroup>\r\n\r\n              <AvGroup>\r\n              <h3>\r\n                <Translate contentKey=\"sepaApp.company.detail.afipActivity\">Activity stablished by AFIP</Translate>\r\n              </h3>\r\n              <AvGroup>\r\n                <Label for=\"company-primIndustryTipe\">\r\n                  <Translate contentKey=\"sepaApp.company.primIndustryTipe\">Prim Industry Tipe</Translate>\r\n                </Label>\r\n                <AvInput id=\"company-primIndustryTipe\" type=\"select\" className=\"form-control\" name=\"primIndustryTipe.id\">\r\n                  <option value=\"\" key=\"0\" />\r\n                  {industryTypes\r\n                    ? industryTypes.map(otherEntity => (\r\n                        <option value={otherEntity.id} key={otherEntity.id}>\r\n                          {otherEntity.ciiu}\r\n                        </option>\r\n                      ))\r\n                    : null}\r\n                </AvInput>\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label for=\"company-secIndustryTipe\">\r\n                  <Translate contentKey=\"sepaApp.company.secIndustryTipe\">Sec Industry Tipe</Translate>\r\n                </Label>\r\n                <AvInput id=\"company-secIndustryTipe\" type=\"select\" className=\"form-control\" name=\"secIndustryTipe.id\">\r\n                  <option value=\"\" key=\"0\" />\r\n                  {industryTypes\r\n                    ? industryTypes.map(otherEntity => (\r\n                        <option value={otherEntity.id} key={otherEntity.id}>\r\n                          {otherEntity.ciiu}\r\n                        </option>\r\n                      ))\r\n                    : null}\r\n                </AvInput>\r\n              </AvGroup>\r\n              </AvGroup>\r\n\r\n              <AvGroup>\r\n              <h3>\r\n                <Translate contentKey=\"sepaApp.company.detail.serviceData\">Service Data</Translate>\r\n              </h3>\r\n              <AvGroup>\r\n                <Label id=\"visitsQtyMinLabel\" for=\"company-visitsQtyMin\">\r\n                  <Translate contentKey=\"sepaApp.company.visitsQtyMin\">Visits Qty Min</Translate>\r\n                </Label>\r\n                <AvField id=\"company-visitsQtyMin\" type=\"string\" className=\"form-control\" name=\"visitsQtyMin\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"visitsQtyMaxLabel\" for=\"company-visitsQtyMax\">\r\n                  <Translate contentKey=\"sepaApp.company.visitsQtyMax\">Visits Qty Max</Translate>\r\n                </Label>\r\n                <AvField id=\"company-visitsQtyMax\" type=\"string\" className=\"form-control\" name=\"visitsQtyMax\" />\r\n              </AvGroup>\r\n              <AvGroup check>\r\n                <Label id=\"isSubscriptedLabel\">\r\n                  <AvInput id=\"company-isSubscripted\" type=\"checkbox\" className=\"form-check-input\" name=\"isSubscripted\" />\r\n                  <Translate contentKey=\"sepaApp.company.isSubscripted\">Is Subscripted</Translate>\r\n                </Label>\r\n              </AvGroup>\r\n              </AvGroup>\r\n\r\n              <AvGroup>\r\n              <h3>\r\n                <Translate contentKey=\"sepaApp.company.detail.others\">Others</Translate>\r\n              </h3>\r\n              <AvGroup>\r\n                <Label id=\"habPrimLabel\" for=\"company-habPrim\">\r\n                  <Translate contentKey=\"sepaApp.company.habPrim\">Hab Prim</Translate>\r\n                </Label>\r\n                <AvField id=\"company-habPrim\" type=\"text\" name=\"habPrim\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"habSecLabel\" for=\"company-habSec\">\r\n                  <Translate contentKey=\"sepaApp.company.habSec\">Hab Sec</Translate>\r\n                </Label>\r\n                <AvField id=\"company-habSec\" type=\"text\" name=\"habSec\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"commentLabel\" for=\"company-comment\">\r\n                  <Translate contentKey=\"sepaApp.company.comment\">Comment</Translate>\r\n                </Label>\r\n                <AvInput id=\"company-comment\" type=\"textarea\" name=\"comment\" />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"createdAtLabel\" for=\"company-createdAt\">\r\n                  <Translate contentKey=\"sepaApp.company.createdAt\">Created At</Translate>\r\n                </Label>\r\n                <AvInput\r\n                  id=\"company-createdAt\"\r\n                  type=\"datetime-local\"\r\n                  className=\"form-control\"\r\n                  name=\"createdAt\"\r\n                  placeholder={'YYYY-MM-DD HH:mm'}\r\n                  value={isNew ? displayDefaultDateTime() : convertDateTimeFromServer(props.companyEntity.createdAt)}\r\n                />\r\n              </AvGroup>\r\n              <AvGroup>\r\n                <Label id=\"updatedAtLabel\" for=\"company-updatedAt\">\r\n                  <Translate contentKey=\"sepaApp.company.updatedAt\">Updated At</Translate>\r\n                </Label>\r\n                <AvInput\r\n                  id=\"company-updatedAt\"\r\n                  type=\"datetime-local\"\r\n                  className=\"form-control\"\r\n                  name=\"updatedAt\"\r\n                  placeholder={'YYYY-MM-DD HH:mm'}\r\n                  value={isNew ? displayDefaultDateTime() : convertDateTimeFromServer(props.companyEntity.updatedAt)}\r\n                />\r\n              </AvGroup>\r\n              </AvGroup>\r\n                           \r\n              <Button tag={Link} id=\"cancel-save\" to=\"/company\" replace color=\"info\">\r\n                <FontAwesomeIcon icon=\"arrow-left\" />\r\n                &nbsp;\r\n                <span className=\"d-none d-md-inline\">\r\n                  <Translate contentKey=\"entity.action.back\">Back</Translate>\r\n                </span>\r\n              </Button>\r\n              &nbsp;\r\n              <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\r\n                <FontAwesomeIcon icon=\"save\" />\r\n                &nbsp;\r\n                <Translate contentKey=\"entity.action.save\">Save</Translate>\r\n              </Button>\r\n            </AvForm>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  employees: storeState.employee.entities,\r\n  industryTypes: storeState.industryType.entities,\r\n  localidadandpartidos: storeState.localidadandpartido.entities,\r\n  companyEntity: storeState.company.entity,\r\n  loading: storeState.company.loading,\r\n  updating: storeState.company.updating,\r\n  updateSuccess: storeState.company.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getEmployees,\r\n  getIndustryTypes,\r\n  getLocalidadandpartidos,\r\n  getEntity,\r\n  updateEntity,\r\n  setBlob,\r\n  createEntity,\r\n  reset\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanyUpdate);\r\n"]}]}