{"remainingRequest":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\company\\company.reducer.ts","dependencies":[{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\company\\company.reducer.ts","mtime":1584152541770},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nimport { parseHeaderForLinks, loadMoreDataWhenScrolled } from 'react-jhipster';\r\nimport { cleanEntity } from 'app/shared/util/entity-utils';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\nimport { defaultValue } from 'app/shared/model/company.model';\r\nexport const ACTION_TYPES = {\r\n    SEARCH_COMPANIES: 'company/SEARCH_COMPANIES',\r\n    FETCH_COMPANY_LIST: 'company/FETCH_COMPANY_LIST',\r\n    FETCH_COMPANY: 'company/FETCH_COMPANY',\r\n    CREATE_COMPANY: 'company/CREATE_COMPANY',\r\n    UPDATE_COMPANY: 'company/UPDATE_COMPANY',\r\n    DELETE_COMPANY: 'company/DELETE_COMPANY',\r\n    SET_BLOB: 'company/SET_BLOB',\r\n    RESET: 'company/RESET'\r\n};\r\nconst initialState = {\r\n    loading: false,\r\n    errorMessage: null,\r\n    entities: [],\r\n    entity: defaultValue,\r\n    links: { next: 0 },\r\n    updating: false,\r\n    totalItems: 0,\r\n    updateSuccess: false\r\n};\r\n// Reducer\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REQUEST(ACTION_TYPES.SEARCH_COMPANIES):\r\n        case REQUEST(ACTION_TYPES.FETCH_COMPANY_LIST):\r\n        case REQUEST(ACTION_TYPES.FETCH_COMPANY):\r\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, loading: true });\r\n        case REQUEST(ACTION_TYPES.CREATE_COMPANY):\r\n        case REQUEST(ACTION_TYPES.UPDATE_COMPANY):\r\n        case REQUEST(ACTION_TYPES.DELETE_COMPANY):\r\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, updating: true });\r\n        case FAILURE(ACTION_TYPES.SEARCH_COMPANIES):\r\n        case FAILURE(ACTION_TYPES.FETCH_COMPANY_LIST):\r\n        case FAILURE(ACTION_TYPES.FETCH_COMPANY):\r\n        case FAILURE(ACTION_TYPES.CREATE_COMPANY):\r\n        case FAILURE(ACTION_TYPES.UPDATE_COMPANY):\r\n        case FAILURE(ACTION_TYPES.DELETE_COMPANY):\r\n            return Object.assign({}, state, { loading: false, updating: false, updateSuccess: false, errorMessage: action.payload });\r\n        case SUCCESS(ACTION_TYPES.SEARCH_COMPANIES):\r\n        case SUCCESS(ACTION_TYPES.FETCH_COMPANY_LIST): {\r\n            const links = parseHeaderForLinks(action.payload.headers.link);\r\n            return Object.assign({}, state, { loading: false, links, entities: loadMoreDataWhenScrolled(state.entities, action.payload.data, links), totalItems: parseInt(action.payload.headers['x-total-count'], 10) });\r\n        }\r\n        case SUCCESS(ACTION_TYPES.FETCH_COMPANY):\r\n            return Object.assign({}, state, { loading: false, entity: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.CREATE_COMPANY):\r\n        case SUCCESS(ACTION_TYPES.UPDATE_COMPANY):\r\n            return Object.assign({}, state, { updating: false, updateSuccess: true, entity: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.DELETE_COMPANY):\r\n            return Object.assign({}, state, { updating: false, updateSuccess: true, entity: {} });\r\n        case ACTION_TYPES.SET_BLOB: {\r\n            const { name, data, contentType } = action.payload;\r\n            return Object.assign({}, state, { entity: Object.assign({}, state.entity, { [name]: data, [name + 'ContentType']: contentType }) });\r\n        }\r\n        case ACTION_TYPES.RESET:\r\n            return Object.assign({}, initialState);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nconst apiUrl = 'api/companies';\r\nconst apiSearchUrl = 'api/_search/companies';\r\n// Actions\r\nexport const getSearchEntities = (query, page, size, sort) => ({\r\n    type: ACTION_TYPES.SEARCH_COMPANIES,\r\n    payload: axios.get(`${apiSearchUrl}?query=${query}${sort ? `&page=${page}&size=${size}&sort=${sort}` : ''}`)\r\n});\r\nexport const getEntities = (page, size, sort) => {\r\n    const requestUrl = `${apiUrl}${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\r\n    return {\r\n        type: ACTION_TYPES.FETCH_COMPANY_LIST,\r\n        payload: axios.get(`${requestUrl}${sort ? '&' : '?'}cacheBuster=${new Date().getTime()}`)\r\n    };\r\n};\r\nexport const getEntity = id => {\r\n    const requestUrl = `${apiUrl}/${id}`;\r\n    return {\r\n        type: ACTION_TYPES.FETCH_COMPANY,\r\n        payload: axios.get(requestUrl)\r\n    };\r\n};\r\nexport const createEntity = entity => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.CREATE_COMPANY,\r\n        payload: axios.post(apiUrl, cleanEntity(entity))\r\n    });\r\n    return result;\r\n});\r\nexport const updateEntity = entity => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.UPDATE_COMPANY,\r\n        payload: axios.put(apiUrl, cleanEntity(entity))\r\n    });\r\n    return result;\r\n});\r\nexport const deleteEntity = id => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const requestUrl = `${apiUrl}/${id}`;\r\n    const result = yield dispatch({\r\n        type: ACTION_TYPES.DELETE_COMPANY,\r\n        payload: axios.delete(requestUrl)\r\n    });\r\n    return result;\r\n});\r\nexport const setBlob = (name, data, contentType) => ({\r\n    type: ACTION_TYPES.SET_BLOB,\r\n    payload: {\r\n        name,\r\n        data,\r\n        contentType\r\n    }\r\n});\r\nexport const reset = () => ({\r\n    type: ACTION_TYPES.RESET\r\n});\r\n",{"version":3,"file":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\company\\company.reducer.ts","sourceRoot":"","sources":["C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\company\\company.reducer.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAEL,mBAAmB,EACnB,wBAAwB,EAKzB,MAAM,gBAAgB,CAAC;AAExB,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AAEjF,OAAO,EAAY,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAExE,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,gBAAgB,EAAE,0BAA0B;IAC5C,kBAAkB,EAAE,4BAA4B;IAChD,aAAa,EAAE,uBAAuB;IACtC,cAAc,EAAE,wBAAwB;IACxC,cAAc,EAAE,wBAAwB;IACxC,cAAc,EAAE,wBAAwB;IACxC,QAAQ,EAAE,kBAAkB;IAC5B,KAAK,EAAE,eAAe;CACvB,CAAC;AAEF,MAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,YAAY,EAAE,IAAI;IAClB,QAAQ,EAAE,EAA6B;IACvC,MAAM,EAAE,YAAY;IACpB,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;IAClB,QAAQ,EAAE,KAAK;IACf,UAAU,EAAE,CAAC;IACb,aAAa,EAAE,KAAK;CACrB,CAAC;AAIF,UAAU;AAEV,eAAe,CAAC,QAAsB,YAAY,EAAE,MAAM,EAAgB,EAAE;IAC1E,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC5C,KAAK,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QAC9C,KAAK,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC;YACtC,yBACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,yBACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,QAAQ,EAAE,IAAI,IACd;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC5C,KAAK,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QAC9C,KAAK,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QACzC,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,yBACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,KAAK,EACpB,YAAY,EAAE,MAAM,CAAC,OAAO,IAC5B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC5C,KAAK,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC7C,MAAM,KAAK,GAAG,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE/D,yBACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,KAAK,EACL,QAAQ,EAAE,wBAAwB,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,EAC9E,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC,IACjE;SACH;QACD,KAAK,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC;YACtC,yBACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,IAC3B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC1C,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,yBACK,KAAK,IACR,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,IAAI,EACnB,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,IAC3B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,yBACK,KAAK,IACR,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,IAAI,EACnB,MAAM,EAAE,EAAE,IACV;QACJ,KAAK,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC1B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC;YACnD,yBACK,KAAK,IACR,MAAM,oBACD,KAAK,CAAC,MAAM,IACf,CAAC,IAAI,CAAC,EAAE,IAAI,EACZ,CAAC,IAAI,GAAG,aAAa,CAAC,EAAE,WAAW,OAErC;SACH;QACD,KAAK,YAAY,CAAC,KAAK;YACrB,yBACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,eAAe,CAAC;AAC/B,MAAM,YAAY,GAAG,uBAAuB,CAAC;AAE7C,UAAU;AAEV,MAAM,CAAC,MAAM,iBAAiB,GAAgC,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1F,IAAI,EAAE,YAAY,CAAC,gBAAgB;IACnC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAW,GAAG,YAAY,UAAU,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,IAAI,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;CACvH,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,WAAW,GAAgC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;IAC3E,MAAM,UAAU,GAAG,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,IAAI,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACvF,OAAO;QACL,IAAI,EAAE,YAAY,CAAC,kBAAkB;QACrC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAW,GAAG,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,eAAe,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC;KACpG,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAA6B,EAAE,CAAC,EAAE;IACtD,MAAM,UAAU,GAAG,GAAG,MAAM,IAAI,EAAE,EAAE,CAAC;IACrC,OAAO;QACL,IAAI,EAAE,YAAY,CAAC,aAAa;QAChC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAW,UAAU,CAAC;KACzC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAA6B,MAAM,CAAC,EAAE,CAAC,CAAM,QAAQ,EAAC,EAAE;IAC/E,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC;QAC5B,IAAI,EAAE,YAAY,CAAC,cAAc;QACjC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;KACjD,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAA6B,MAAM,CAAC,EAAE,CAAC,CAAM,QAAQ,EAAC,EAAE;IAC/E,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC;QAC5B,IAAI,EAAE,YAAY,CAAC,cAAc;QACjC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;KAChD,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAgC,EAAE,CAAC,EAAE,CAAC,CAAM,QAAQ,EAAC,EAAE;IAC9E,MAAM,UAAU,GAAG,GAAG,MAAM,IAAI,EAAE,EAAE,CAAC;IACrC,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC;QAC5B,IAAI,EAAE,YAAY,CAAC,cAAc;QACjC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC;KAClC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,WAAY,EAAE,EAAE,CAAC,CAAC;IACpD,IAAI,EAAE,YAAY,CAAC,QAAQ;IAC3B,OAAO,EAAE;QACP,IAAI;QACJ,IAAI;QACJ,WAAW;KACZ;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,CAAC","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  ICrudSearchAction,\r\n  parseHeaderForLinks,\r\n  loadMoreDataWhenScrolled,\r\n  ICrudGetAction,\r\n  ICrudGetAllAction,\r\n  ICrudPutAction,\r\n  ICrudDeleteAction\r\n} from 'react-jhipster';\r\n\r\nimport { cleanEntity } from 'app/shared/util/entity-utils';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\n\r\nimport { ICompany, defaultValue } from 'app/shared/model/company.model';\r\n\r\nexport const ACTION_TYPES = {\r\n  SEARCH_COMPANIES: 'company/SEARCH_COMPANIES',\r\n  FETCH_COMPANY_LIST: 'company/FETCH_COMPANY_LIST',\r\n  FETCH_COMPANY: 'company/FETCH_COMPANY',\r\n  CREATE_COMPANY: 'company/CREATE_COMPANY',\r\n  UPDATE_COMPANY: 'company/UPDATE_COMPANY',\r\n  DELETE_COMPANY: 'company/DELETE_COMPANY',\r\n  SET_BLOB: 'company/SET_BLOB',\r\n  RESET: 'company/RESET'\r\n};\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  errorMessage: null,\r\n  entities: [] as ReadonlyArray<ICompany>,\r\n  entity: defaultValue,\r\n  links: { next: 0 },\r\n  updating: false,\r\n  totalItems: 0,\r\n  updateSuccess: false\r\n};\r\n\r\nexport type CompanyState = Readonly<typeof initialState>;\r\n\r\n// Reducer\r\n\r\nexport default (state: CompanyState = initialState, action): CompanyState => {\r\n  switch (action.type) {\r\n    case REQUEST(ACTION_TYPES.SEARCH_COMPANIES):\r\n    case REQUEST(ACTION_TYPES.FETCH_COMPANY_LIST):\r\n    case REQUEST(ACTION_TYPES.FETCH_COMPANY):\r\n      return {\r\n        ...state,\r\n        errorMessage: null,\r\n        updateSuccess: false,\r\n        loading: true\r\n      };\r\n    case REQUEST(ACTION_TYPES.CREATE_COMPANY):\r\n    case REQUEST(ACTION_TYPES.UPDATE_COMPANY):\r\n    case REQUEST(ACTION_TYPES.DELETE_COMPANY):\r\n      return {\r\n        ...state,\r\n        errorMessage: null,\r\n        updateSuccess: false,\r\n        updating: true\r\n      };\r\n    case FAILURE(ACTION_TYPES.SEARCH_COMPANIES):\r\n    case FAILURE(ACTION_TYPES.FETCH_COMPANY_LIST):\r\n    case FAILURE(ACTION_TYPES.FETCH_COMPANY):\r\n    case FAILURE(ACTION_TYPES.CREATE_COMPANY):\r\n    case FAILURE(ACTION_TYPES.UPDATE_COMPANY):\r\n    case FAILURE(ACTION_TYPES.DELETE_COMPANY):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        updating: false,\r\n        updateSuccess: false,\r\n        errorMessage: action.payload\r\n      };\r\n    case SUCCESS(ACTION_TYPES.SEARCH_COMPANIES):\r\n    case SUCCESS(ACTION_TYPES.FETCH_COMPANY_LIST): {\r\n      const links = parseHeaderForLinks(action.payload.headers.link);\r\n\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        links,\r\n        entities: loadMoreDataWhenScrolled(state.entities, action.payload.data, links),\r\n        totalItems: parseInt(action.payload.headers['x-total-count'], 10)\r\n      };\r\n    }\r\n    case SUCCESS(ACTION_TYPES.FETCH_COMPANY):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        entity: action.payload.data\r\n      };\r\n    case SUCCESS(ACTION_TYPES.CREATE_COMPANY):\r\n    case SUCCESS(ACTION_TYPES.UPDATE_COMPANY):\r\n      return {\r\n        ...state,\r\n        updating: false,\r\n        updateSuccess: true,\r\n        entity: action.payload.data\r\n      };\r\n    case SUCCESS(ACTION_TYPES.DELETE_COMPANY):\r\n      return {\r\n        ...state,\r\n        updating: false,\r\n        updateSuccess: true,\r\n        entity: {}\r\n      };\r\n    case ACTION_TYPES.SET_BLOB: {\r\n      const { name, data, contentType } = action.payload;\r\n      return {\r\n        ...state,\r\n        entity: {\r\n          ...state.entity,\r\n          [name]: data,\r\n          [name + 'ContentType']: contentType\r\n        }\r\n      };\r\n    }\r\n    case ACTION_TYPES.RESET:\r\n      return {\r\n        ...initialState\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst apiUrl = 'api/companies';\r\nconst apiSearchUrl = 'api/_search/companies';\r\n\r\n// Actions\r\n\r\nexport const getSearchEntities: ICrudSearchAction<ICompany> = (query, page, size, sort) => ({\r\n  type: ACTION_TYPES.SEARCH_COMPANIES,\r\n  payload: axios.get<ICompany>(`${apiSearchUrl}?query=${query}${sort ? `&page=${page}&size=${size}&sort=${sort}` : ''}`)\r\n});\r\n\r\nexport const getEntities: ICrudGetAllAction<ICompany> = (page, size, sort) => {\r\n  const requestUrl = `${apiUrl}${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\r\n  return {\r\n    type: ACTION_TYPES.FETCH_COMPANY_LIST,\r\n    payload: axios.get<ICompany>(`${requestUrl}${sort ? '&' : '?'}cacheBuster=${new Date().getTime()}`)\r\n  };\r\n};\r\n\r\nexport const getEntity: ICrudGetAction<ICompany> = id => {\r\n  const requestUrl = `${apiUrl}/${id}`;\r\n  return {\r\n    type: ACTION_TYPES.FETCH_COMPANY,\r\n    payload: axios.get<ICompany>(requestUrl)\r\n  };\r\n};\r\n\r\nexport const createEntity: ICrudPutAction<ICompany> = entity => async dispatch => {\r\n  const result = await dispatch({\r\n    type: ACTION_TYPES.CREATE_COMPANY,\r\n    payload: axios.post(apiUrl, cleanEntity(entity))\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const updateEntity: ICrudPutAction<ICompany> = entity => async dispatch => {\r\n  const result = await dispatch({\r\n    type: ACTION_TYPES.UPDATE_COMPANY,\r\n    payload: axios.put(apiUrl, cleanEntity(entity))\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const deleteEntity: ICrudDeleteAction<ICompany> = id => async dispatch => {\r\n  const requestUrl = `${apiUrl}/${id}`;\r\n  const result = await dispatch({\r\n    type: ACTION_TYPES.DELETE_COMPANY,\r\n    payload: axios.delete(requestUrl)\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const setBlob = (name, data, contentType?) => ({\r\n  type: ACTION_TYPES.SET_BLOB,\r\n  payload: {\r\n    name,\r\n    data,\r\n    contentType\r\n  }\r\n});\r\n\r\nexport const reset = () => ({\r\n  type: ACTION_TYPES.RESET\r\n});\r\n"]}]}