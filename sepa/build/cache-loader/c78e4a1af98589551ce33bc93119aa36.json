{"remainingRequest":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","dependencies":[{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","mtime":1584152541794},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Row, Button } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, getUrlParameter } from 'react-jhipster';\r\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nexport const PasswordResetFinishPage = (props) => {\r\n    const [password, setPassword] = useState('');\r\n    const [key] = useState(getUrlParameter('key', props.location.search));\r\n    useEffect(() => () => props.reset(), []);\r\n    const handleValidSubmit = (event, values) => props.handlePasswordResetFinish(key, values.newPassword);\r\n    const updatePassword = event => setPassword(event.target.value);\r\n    const getResetForm = () => {\r\n        return (React.createElement(AvForm, { onValidSubmit: handleValidSubmit },\r\n            React.createElement(AvField, { name: \"newPassword\", label: translate('global.form.newpassword.label'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", validate: {\r\n                    required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n                    minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n                    maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\r\n                }, onChange: updatePassword }),\r\n            React.createElement(PasswordStrengthBar, { password: password }),\r\n            React.createElement(AvField, { name: \"confirmPassword\", label: translate('global.form.confirmpassword.label'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\r\n                    required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\r\n                    minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\r\n                    maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\r\n                    match: { value: 'newPassword', errorMessage: translate('global.messages.error.dontmatch') }\r\n                } }),\r\n            React.createElement(Button, { color: \"success\", type: \"submit\" },\r\n                React.createElement(Translate, { contentKey: \"reset.finish.form.button\" }, \"Validate new password\"))));\r\n    };\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"4\" },\r\n                React.createElement(\"h1\", null,\r\n                    React.createElement(Translate, { contentKey: \"reset.finish.title\" }, \"Reset password\")),\r\n                React.createElement(\"div\", null, key ? getResetForm() : null)))));\r\n};\r\nconst mapDispatchToProps = { handlePasswordResetFinish, reset };\r\nexport default connect(null, mapDispatchToProps)(PasswordResetFinishPage);\r\n",{"version":3,"file":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","sourceRoot":"","sources":["C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Row, Button } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, getUrlParameter } from 'react-jhipster';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\n\r\nexport interface IPasswordResetFinishProps extends DispatchProps, RouteComponentProps<{ key: string }> {}\r\n\r\nexport const PasswordResetFinishPage = (props: IPasswordResetFinishProps) => {\r\n  const [password, setPassword] = useState('');\r\n  const [key] = useState(getUrlParameter('key', props.location.search));\r\n\r\n  useEffect(() => () => props.reset(), []);\r\n\r\n  const handleValidSubmit = (event, values) => props.handlePasswordResetFinish(key, values.newPassword);\r\n\r\n  const updatePassword = event => setPassword(event.target.value);\r\n\r\n  const getResetForm = () => {\r\n    return (\r\n      <AvForm onValidSubmit={handleValidSubmit}>\r\n        <AvField\r\n          name=\"newPassword\"\r\n          label={translate('global.form.newpassword.label')}\r\n          placeholder={translate('global.form.newpassword.placeholder')}\r\n          type=\"password\"\r\n          validate={{\r\n            required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\r\n            minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\r\n            maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\r\n          }}\r\n          onChange={updatePassword}\r\n        />\r\n        <PasswordStrengthBar password={password} />\r\n        <AvField\r\n          name=\"confirmPassword\"\r\n          label={translate('global.form.confirmpassword.label')}\r\n          placeholder={translate('global.form.confirmpassword.placeholder')}\r\n          type=\"password\"\r\n          validate={{\r\n            required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\r\n            minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\r\n            maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\r\n            match: { value: 'newPassword', errorMessage: translate('global.messages.error.dontmatch') }\r\n          }}\r\n        />\r\n        <Button color=\"success\" type=\"submit\">\r\n          <Translate contentKey=\"reset.finish.form.button\">Validate new password</Translate>\r\n        </Button>\r\n      </AvForm>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"4\">\r\n          <h1>\r\n            <Translate contentKey=\"reset.finish.title\">Reset password</Translate>\r\n          </h1>\r\n          <div>{key ? getResetForm() : null}</div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = { handlePasswordResetFinish, reset };\r\n\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(PasswordResetFinishPage);\r\n"]}]}