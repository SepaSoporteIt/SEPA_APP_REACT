{"remainingRequest":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\industry-type\\industry-type-update.tsx","dependencies":[{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\industry-type\\industry-type-update.tsx","mtime":1580568107490},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntity, updateEntity, createEntity, reset } from './industry-type.reducer';\r\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\r\nexport class IndustryTypeUpdate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.saveEntity = (event, errors, values) => {\r\n            values.createdAt = convertDateTimeToServer(values.createdAt);\r\n            values.updatedAt = convertDateTimeToServer(values.updatedAt);\r\n            if (errors.length === 0) {\r\n                const { industryTypeEntity } = this.props;\r\n                const entity = Object.assign({}, industryTypeEntity, values);\r\n                if (this.state.isNew) {\r\n                    this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        this.handleClose = () => {\r\n            this.props.history.push('/industry-type');\r\n        };\r\n        this.state = {\r\n            isNew: !this.props.match.params || !this.props.match.params.id\r\n        };\r\n    }\r\n    componentWillUpdate(nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.isNew) {\r\n            this.props.reset();\r\n        }\r\n        else {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n    }\r\n    render() {\r\n        const { industryTypeEntity, loading, updating } = this.props;\r\n        const { isNew } = this.state;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"sepaApp.industryType.home.createOrEditLabel\" },\r\n                        React.createElement(Translate, { contentKey: \"sepaApp.industryType.home.createOrEditLabel\" }, \"Create or edit a IndustryType\")))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : industryTypeEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"industry-type-id\" },\r\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\r\n                        React.createElement(AvInput, { id: \"industry-type-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"nameLabel\", for: \"industry-type-name\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.industryType.name\" }, \"Name\")),\r\n                        React.createElement(AvField, { id: \"industry-type-name\", type: \"text\", name: \"name\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"ciiuLabel\", for: \"industry-type-ciiu\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.industryType.ciiu\" }, \"Ciiu\")),\r\n                        React.createElement(AvField, { id: \"industry-type-ciiu\", type: \"text\", name: \"ciiu\", validate: {\r\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                            } })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"createdAtLabel\", for: \"industry-type-createdAt\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.industryType.createdAt\" }, \"Created At\")),\r\n                        React.createElement(AvInput, { id: \"industry-type-createdAt\", type: \"datetime-local\", className: \"form-control\", name: \"createdAt\", placeholder: 'YYYY-MM-DD HH:mm', value: isNew ? null : convertDateTimeFromServer(this.props.industryTypeEntity.createdAt) })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"updatedAtLabel\", for: \"industry-type-updatedAt\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.industryType.updatedAt\" }, \"Updated At\")),\r\n                        React.createElement(AvInput, { id: \"industry-type-updatedAt\", type: \"datetime-local\", className: \"form-control\", name: \"updatedAt\", placeholder: 'YYYY-MM-DD HH:mm', value: isNew ? null : convertDateTimeFromServer(this.props.industryTypeEntity.updatedAt) })),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/industry-type\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                            React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\r\n    }\r\n}\r\nconst mapStateToProps = (storeState) => ({\r\n    industryTypeEntity: storeState.industryType.entity,\r\n    loading: storeState.industryType.loading,\r\n    updating: storeState.industryType.updating,\r\n    updateSuccess: storeState.industryType.updateSuccess\r\n});\r\nconst mapDispatchToProps = {\r\n    getEntity,\r\n    updateEntity,\r\n    createEntity,\r\n    reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndustryTypeUpdate);\r\n",{"version":3,"file":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\industry-type\\industry-type-update.tsx","sourceRoot":"","sources":["C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\industry-type\\industry-type-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvFeedback, AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nimport { getEntity, updateEntity, createEntity, reset } from './industry-type.reducer';\r\nimport { IIndustryType } from 'app/shared/model/industry-type.model';\r\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\r\nimport { mapIdList } from 'app/shared/util/entity-utils';\r\n\r\nexport interface IIndustryTypeUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface IIndustryTypeUpdateState {\r\n  isNew: boolean;\r\n}\r\n\r\nexport class IndustryTypeUpdate extends React.Component<IIndustryTypeUpdateProps, IIndustryTypeUpdateState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isNew: !this.props.match.params || !this.props.match.params.id\r\n    };\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n      this.handleClose();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.isNew) {\r\n      this.props.reset();\r\n    } else {\r\n      this.props.getEntity(this.props.match.params.id);\r\n    }\r\n  }\r\n\r\n  saveEntity = (event, errors, values) => {\r\n    values.createdAt = convertDateTimeToServer(values.createdAt);\r\n    values.updatedAt = convertDateTimeToServer(values.updatedAt);\r\n\r\n    if (errors.length === 0) {\r\n      const { industryTypeEntity } = this.props;\r\n      const entity = {\r\n        ...industryTypeEntity,\r\n        ...values\r\n      };\r\n\r\n      if (this.state.isNew) {\r\n        this.props.createEntity(entity);\r\n      } else {\r\n        this.props.updateEntity(entity);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.history.push('/industry-type');\r\n  };\r\n\r\n  render() {\r\n    const { industryTypeEntity, loading, updating } = this.props;\r\n    const { isNew } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h2 id=\"sepaApp.industryType.home.createOrEditLabel\">\r\n              <Translate contentKey=\"sepaApp.industryType.home.createOrEditLabel\">Create or edit a IndustryType</Translate>\r\n            </h2>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            {loading ? (\r\n              <p>Loading...</p>\r\n            ) : (\r\n              <AvForm model={isNew ? {} : industryTypeEntity} onSubmit={this.saveEntity}>\r\n                {!isNew ? (\r\n                  <AvGroup>\r\n                    <Label for=\"industry-type-id\">\r\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\r\n                    </Label>\r\n                    <AvInput id=\"industry-type-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\r\n                  </AvGroup>\r\n                ) : null}\r\n                <AvGroup>\r\n                  <Label id=\"nameLabel\" for=\"industry-type-name\">\r\n                    <Translate contentKey=\"sepaApp.industryType.name\">Name</Translate>\r\n                  </Label>\r\n                  <AvField\r\n                    id=\"industry-type-name\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    validate={{\r\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                    }}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"ciiuLabel\" for=\"industry-type-ciiu\">\r\n                    <Translate contentKey=\"sepaApp.industryType.ciiu\">Ciiu</Translate>\r\n                  </Label>\r\n                  <AvField\r\n                    id=\"industry-type-ciiu\"\r\n                    type=\"text\"\r\n                    name=\"ciiu\"\r\n                    validate={{\r\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\r\n                    }}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"createdAtLabel\" for=\"industry-type-createdAt\">\r\n                    <Translate contentKey=\"sepaApp.industryType.createdAt\">Created At</Translate>\r\n                  </Label>\r\n                  <AvInput\r\n                    id=\"industry-type-createdAt\"\r\n                    type=\"datetime-local\"\r\n                    className=\"form-control\"\r\n                    name=\"createdAt\"\r\n                    placeholder={'YYYY-MM-DD HH:mm'}\r\n                    value={isNew ? null : convertDateTimeFromServer(this.props.industryTypeEntity.createdAt)}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"updatedAtLabel\" for=\"industry-type-updatedAt\">\r\n                    <Translate contentKey=\"sepaApp.industryType.updatedAt\">Updated At</Translate>\r\n                  </Label>\r\n                  <AvInput\r\n                    id=\"industry-type-updatedAt\"\r\n                    type=\"datetime-local\"\r\n                    className=\"form-control\"\r\n                    name=\"updatedAt\"\r\n                    placeholder={'YYYY-MM-DD HH:mm'}\r\n                    value={isNew ? null : convertDateTimeFromServer(this.props.industryTypeEntity.updatedAt)}\r\n                  />\r\n                </AvGroup>\r\n                <Button tag={Link} id=\"cancel-save\" to=\"/industry-type\" replace color=\"info\">\r\n                  <FontAwesomeIcon icon=\"arrow-left\" />\r\n                  &nbsp;\r\n                  <span className=\"d-none d-md-inline\">\r\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\r\n                  </span>\r\n                </Button>\r\n                &nbsp;\r\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\r\n                  <FontAwesomeIcon icon=\"save\" />\r\n                  &nbsp;\r\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\r\n                </Button>\r\n              </AvForm>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  industryTypeEntity: storeState.industryType.entity,\r\n  loading: storeState.industryType.loading,\r\n  updating: storeState.industryType.updating,\r\n  updateSuccess: storeState.industryType.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getEntity,\r\n  updateEntity,\r\n  createEntity,\r\n  reset\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(IndustryTypeUpdate);\r\n"]}]}