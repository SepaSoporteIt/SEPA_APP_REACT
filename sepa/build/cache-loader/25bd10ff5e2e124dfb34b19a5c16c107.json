{"remainingRequest":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\employee\\employee.tsx","dependencies":[{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\employee\\employee.tsx","mtime":1584192247835},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, InputGroup, Col, Row, Table } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, getSortState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getSearchEntities, getEntities, reset } from './employee.reducer';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nexport const Employee = (props) => {\r\n    const [search, setSearch] = useState('');\r\n    const [paginationState, setPaginationState] = useState(getSortState(props.location, ITEMS_PER_PAGE));\r\n    const [sorting, setSorting] = useState(false);\r\n    const getAllEntities = () => {\r\n        if (search) {\r\n            props.getSearchEntities(search, paginationState.activePage - 1, paginationState.itemsPerPage, `${paginationState.sort},${paginationState.order}`);\r\n        }\r\n        else {\r\n            props.getEntities(paginationState.activePage - 1, paginationState.itemsPerPage, `${paginationState.sort},${paginationState.order}`);\r\n        }\r\n    };\r\n    const resetAll = () => {\r\n        props.reset();\r\n        setPaginationState(Object.assign({}, paginationState, { activePage: 1 }));\r\n    };\r\n    useEffect(() => {\r\n        resetAll();\r\n    }, []);\r\n    useEffect(() => {\r\n        if (props.updateSuccess) {\r\n            getAllEntities();\r\n        }\r\n    });\r\n    const startSearching = () => {\r\n        if (search) {\r\n            props.reset();\r\n            setPaginationState(Object.assign({}, paginationState, { activePage: 1 }));\r\n        }\r\n    };\r\n    const clear = () => {\r\n        props.reset();\r\n        setSearch('');\r\n        setPaginationState(Object.assign({}, paginationState, { activePage: 1 }));\r\n    };\r\n    const handleSearch = event => setSearch(event.target.value);\r\n    useEffect(() => {\r\n        getAllEntities();\r\n    }, [paginationState.activePage]);\r\n    const handleLoadMore = () => {\r\n        if (window.pageYOffset > 0) {\r\n            setPaginationState(Object.assign({}, paginationState, { activePage: paginationState.activePage + 1 }));\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (sorting) {\r\n            getAllEntities();\r\n            setSorting(false);\r\n        }\r\n    }, [sorting, search]);\r\n    const sort = p => () => {\r\n        props.reset();\r\n        setPaginationState(Object.assign({}, paginationState, { activePage: 1, order: paginationState.order === 'asc' ? 'desc' : 'asc', sort: p }));\r\n        setSorting(true);\r\n    };\r\n    const { employeeList, match, loading } = props;\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(\"h2\", { id: \"employee-heading\" },\r\n            React.createElement(Translate, { contentKey: \"sepaApp.employee.home.title\" }, \"Employees\"),\r\n            React.createElement(Link, { to: `${match.url}/new`, className: \"btn btn-primary float-right jh-create-entity\", id: \"jh-create-entity\" },\r\n                React.createElement(FontAwesomeIcon, { icon: \"plus\" }),\r\n                \"\\u00A0\",\r\n                React.createElement(Translate, { contentKey: \"sepaApp.employee.home.createLabel\" }, \"Create new Employee\"))),\r\n        React.createElement(Row, null,\r\n            React.createElement(Col, { sm: \"12\" },\r\n                React.createElement(AvForm, { onSubmit: startSearching },\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(InputGroup, null,\r\n                            React.createElement(AvInput, { type: \"text\", name: \"search\", value: search, onChange: handleSearch, placeholder: translate('sepaApp.employee.home.search') }),\r\n                            React.createElement(Button, { className: \"input-group-addon\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"search\" })),\r\n                            React.createElement(Button, { type: \"reset\", className: \"input-group-addon\", onClick: clear },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"trash\" }))))))),\r\n        React.createElement(\"div\", { className: \"table-responsive\" },\r\n            React.createElement(InfiniteScroll, { pageStart: paginationState.activePage, loadMore: handleLoadMore, hasMore: paginationState.activePage - 1 < props.links.next, loader: React.createElement(\"div\", { className: \"loader\" }, \"Loading ...\"), threshold: 0, initialLoad: false }, employeeList && employeeList.length > 0 ? (React.createElement(Table, { responsive: true },\r\n                React.createElement(\"thead\", null,\r\n                    React.createElement(\"tr\", null,\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: sort('name') },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.employee.fullName\" }, \"Full Name\"),\r\n                            \" \",\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: sort('matNumber') },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.employee.matNumber\" }, \"Mat Number\"),\r\n                            \" \",\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: sort('cuit') },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.employee.cuit\" }, \"Cuit\"),\r\n                            \" \",\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: sort('tlf') },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.employee.tlf\" }, \"Tlf\"),\r\n                            \" \",\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", { className: \"hand\", onClick: sort('isInternal') },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.employee.isInternal\" }, \"Is Internal\"),\r\n                            \" \",\r\n                            React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                        React.createElement(\"th\", null))),\r\n                React.createElement(\"tbody\", null, employeeList.map((employee, i) => (React.createElement(\"tr\", { key: `entity-${i}` },\r\n                    React.createElement(\"td\", null,\r\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${employee.id}`, color: \"link\", size: \"sm\" }, employee.name + \" \" + employee.surname)),\r\n                    React.createElement(\"td\", null, employee.matNumber),\r\n                    React.createElement(\"td\", null, employee.cuit),\r\n                    React.createElement(\"td\", null, employee.tlf),\r\n                    React.createElement(\"td\", null, employee.isInternal ? 'Si' : 'No'),\r\n                    React.createElement(\"td\", { className: \"text-right\" },\r\n                        React.createElement(\"div\", { className: \"btn-group flex-btn-group-container\" },\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${employee.id}`, color: \"info\", size: \"sm\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"eye\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.view\" }, \"View\"))),\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${employee.id}/edit`, color: \"primary\", size: \"sm\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"pencil-alt\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.edit\" }, \"Edit\"))),\r\n                            React.createElement(Button, { tag: Link, to: `${match.url}/${employee.id}/delete`, color: \"danger\", size: \"sm\" },\r\n                                React.createElement(FontAwesomeIcon, { icon: \"trash\" }),\r\n                                ' ',\r\n                                React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                    React.createElement(Translate, { contentKey: \"entity.action.delete\" }, \"Delete\"))))))))))) : (!loading && (React.createElement(\"div\", { className: \"alert alert-warning\" },\r\n                React.createElement(Translate, { contentKey: \"sepaApp.employee.home.notFound\" }, \"No Employees found\"))))))));\r\n};\r\nconst mapStateToProps = ({ employee }) => ({\r\n    employeeList: employee.entities,\r\n    loading: employee.loading,\r\n    totalItems: employee.totalItems,\r\n    links: employee.links,\r\n    entity: employee.entity,\r\n    updateSuccess: employee.updateSuccess\r\n});\r\nconst mapDispatchToProps = {\r\n    getSearchEntities,\r\n    getEntities,\r\n    reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee);\r\n",{"version":3,"file":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\employee\\employee.tsx","sourceRoot":"","sources":["C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\employee\\employee.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, InputGroup, Col, Row, Table } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, ICrudSearchAction, ICrudGetAllAction, TextFormat, getSortState, IPaginationBaseState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSearchEntities, getEntities, reset } from './employee.reducer';\r\nimport { IEmployee } from 'app/shared/model/employee.model';\r\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\n\r\nexport interface IEmployeeProps extends StateProps, DispatchProps, RouteComponentProps<{ url: string }> {}\r\n\r\nexport const Employee = (props: IEmployeeProps) => {\r\n  const [search, setSearch] = useState('');\r\n  const [paginationState, setPaginationState] = useState(getSortState(props.location, ITEMS_PER_PAGE));\r\n  const [sorting, setSorting] = useState(false);\r\n\r\n  const getAllEntities = () => {\r\n    if (search) {\r\n      props.getSearchEntities(\r\n        search,\r\n        paginationState.activePage - 1,\r\n        paginationState.itemsPerPage,\r\n        `${paginationState.sort},${paginationState.order}`\r\n      );\r\n    } else {\r\n      props.getEntities(paginationState.activePage - 1, paginationState.itemsPerPage, `${paginationState.sort},${paginationState.order}`);\r\n    }\r\n  };\r\n\r\n  const resetAll = () => {\r\n    props.reset();\r\n    setPaginationState({\r\n      ...paginationState,\r\n      activePage: 1\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetAll();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.updateSuccess) {\r\n      getAllEntities();\r\n    }\r\n  });\r\n\r\n  const startSearching = () => {\r\n    if (search) {\r\n      props.reset();\r\n      setPaginationState({\r\n        ...paginationState,\r\n        activePage: 1\r\n      });\r\n    }\r\n  };\r\n\r\n  const clear = () => {\r\n    props.reset();\r\n    setSearch('');\r\n    setPaginationState({\r\n      ...paginationState,\r\n      activePage: 1\r\n    });\r\n  };\r\n\r\n  const handleSearch = event => setSearch(event.target.value);\r\n\r\n  useEffect(() => {\r\n    getAllEntities();\r\n  }, [paginationState.activePage]);\r\n\r\n  const handleLoadMore = () => {\r\n    if (window.pageYOffset > 0) {\r\n      setPaginationState({\r\n        ...paginationState,\r\n        activePage: paginationState.activePage + 1\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sorting) {\r\n      getAllEntities();\r\n      setSorting(false);\r\n    }\r\n  }, [sorting, search]);\r\n\r\n  const sort = p => () => {\r\n    props.reset();\r\n    setPaginationState({\r\n      ...paginationState,\r\n      activePage: 1,\r\n      order: paginationState.order === 'asc' ? 'desc' : 'asc',\r\n      sort: p\r\n    });\r\n    setSorting(true);\r\n  };\r\n\r\n  const { employeeList, match, loading } = props;\r\n  return (\r\n    <div>\r\n      <h2 id=\"employee-heading\">\r\n        <Translate contentKey=\"sepaApp.employee.home.title\">Employees</Translate>\r\n        <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\" id=\"jh-create-entity\">\r\n          <FontAwesomeIcon icon=\"plus\" />\r\n          &nbsp;\r\n          <Translate contentKey=\"sepaApp.employee.home.createLabel\">Create new Employee</Translate>\r\n        </Link>\r\n      </h2>\r\n      <Row>\r\n        <Col sm=\"12\">\r\n          <AvForm onSubmit={startSearching}>\r\n            <AvGroup>\r\n              <InputGroup>\r\n                <AvInput\r\n                  type=\"text\"\r\n                  name=\"search\"\r\n                  value={search}\r\n                  onChange={handleSearch}\r\n                  placeholder={translate('sepaApp.employee.home.search')}\r\n                />\r\n                <Button className=\"input-group-addon\">\r\n                  <FontAwesomeIcon icon=\"search\" />\r\n                </Button>\r\n                <Button type=\"reset\" className=\"input-group-addon\" onClick={clear}>\r\n                  <FontAwesomeIcon icon=\"trash\" />\r\n                </Button>\r\n              </InputGroup>\r\n            </AvGroup>\r\n          </AvForm>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"table-responsive\">\r\n        <InfiniteScroll\r\n          pageStart={paginationState.activePage}\r\n          loadMore={handleLoadMore}\r\n          hasMore={paginationState.activePage - 1 < props.links.next}\r\n          loader={<div className=\"loader\">Loading ...</div>}\r\n          threshold={0}\r\n          initialLoad={false}\r\n        >\r\n          {employeeList && employeeList.length > 0 ? (\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"hand\" onClick={sort('name')}>\r\n                    <Translate contentKey=\"sepaApp.employee.fullName\">Full Name</Translate> <FontAwesomeIcon icon=\"sort\" />\r\n                  </th>\r\n                  <th className=\"hand\" onClick={sort('matNumber')}>\r\n                    <Translate contentKey=\"sepaApp.employee.matNumber\">Mat Number</Translate> <FontAwesomeIcon icon=\"sort\" />\r\n                  </th>\r\n                  <th className=\"hand\" onClick={sort('cuit')}>\r\n                    <Translate contentKey=\"sepaApp.employee.cuit\">Cuit</Translate> <FontAwesomeIcon icon=\"sort\" />\r\n                  </th>\r\n                  <th className=\"hand\" onClick={sort('tlf')}>\r\n                    <Translate contentKey=\"sepaApp.employee.tlf\">Tlf</Translate> <FontAwesomeIcon icon=\"sort\" />\r\n                  </th>\r\n                  <th className=\"hand\" onClick={sort('isInternal')}>\r\n                    <Translate contentKey=\"sepaApp.employee.isInternal\">Is Internal</Translate> <FontAwesomeIcon icon=\"sort\" />\r\n                  </th>\r\n                  <th />\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {employeeList.map((employee, i) => (\r\n                  <tr key={`entity-${i}`}>\r\n                    <td>\r\n                      <Button tag={Link} to={`${match.url}/${employee.id}`} color=\"link\" size=\"sm\">\r\n                        {employee.name + \" \" + employee.surname}\r\n                      </Button>\r\n                    </td>\r\n                    <td>{employee.matNumber}</td>\r\n                    <td>{employee.cuit}</td>\r\n                    <td>{employee.tlf}</td>\r\n                    <td>{employee.isInternal ? 'Si' : 'No'}</td>\r\n                    <td className=\"text-right\">\r\n                      <div className=\"btn-group flex-btn-group-container\">\r\n                        <Button tag={Link} to={`${match.url}/${employee.id}`} color=\"info\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"eye\" />{' '}\r\n                          <span className=\"d-none d-md-inline\">\r\n                            <Translate contentKey=\"entity.action.view\">View</Translate>\r\n                          </span>\r\n                        </Button>\r\n                        <Button tag={Link} to={`${match.url}/${employee.id}/edit`} color=\"primary\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\r\n                          <span className=\"d-none d-md-inline\">\r\n                            <Translate contentKey=\"entity.action.edit\">Edit</Translate>\r\n                          </span>\r\n                        </Button>\r\n                        <Button tag={Link} to={`${match.url}/${employee.id}/delete`} color=\"danger\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"trash\" />{' '}\r\n                          <span className=\"d-none d-md-inline\">\r\n                            <Translate contentKey=\"entity.action.delete\">Delete</Translate>\r\n                          </span>\r\n                        </Button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          ) : (\r\n            !loading && (\r\n              <div className=\"alert alert-warning\">\r\n                <Translate contentKey=\"sepaApp.employee.home.notFound\">No Employees found</Translate>\r\n              </div>\r\n            )\r\n          )}\r\n        </InfiniteScroll>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ employee }: IRootState) => ({\r\n  employeeList: employee.entities,\r\n  loading: employee.loading,\r\n  totalItems: employee.totalItems,\r\n  links: employee.links,\r\n  entity: employee.entity,\r\n  updateSuccess: employee.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getSearchEntities,\r\n  getEntities,\r\n  reset\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee);\r\n"]}]}