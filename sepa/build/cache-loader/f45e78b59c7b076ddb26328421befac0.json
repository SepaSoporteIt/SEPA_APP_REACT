{"remainingRequest":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.tsx","dependencies":[{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.tsx","mtime":1580568107537},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useEffect } from 'react';\r\nimport { Button, Col, Row } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport { saveAccountSettings, reset } from './settings.reducer';\r\nexport const SettingsPage = (props) => {\r\n    useEffect(() => {\r\n        props.getSession();\r\n        return () => {\r\n            props.reset();\r\n        };\r\n    }, []);\r\n    const handleValidSubmit = (event, values) => {\r\n        const account = Object.assign({}, props.account, values);\r\n        props.saveAccountSettings(account);\r\n        event.persist();\r\n    };\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(Row, { className: \"justify-content-center\" },\r\n            React.createElement(Col, { md: \"8\" },\r\n                React.createElement(\"h2\", { id: \"settings-title\" },\r\n                    React.createElement(Translate, { contentKey: \"settings.title\", interpolate: { username: props.account.login } },\r\n                        \"User settings for \",\r\n                        props.account.login)),\r\n                React.createElement(AvForm, { id: \"settings-form\", onValidSubmit: handleValidSubmit },\r\n                    React.createElement(AvField, { className: \"form-control\", name: \"firstName\", label: translate('settings.form.firstname'), id: \"firstName\", placeholder: translate('settings.form.firstname.placeholder'), validate: {\r\n                            required: { value: true, errorMessage: translate('settings.messages.validate.firstname.required') },\r\n                            minLength: { value: 1, errorMessage: translate('settings.messages.validate.firstname.minlength') },\r\n                            maxLength: { value: 50, errorMessage: translate('settings.messages.validate.firstname.maxlength') }\r\n                        }, value: props.account.firstName }),\r\n                    React.createElement(AvField, { className: \"form-control\", name: \"lastName\", label: translate('settings.form.lastname'), id: \"lastName\", placeholder: translate('settings.form.lastname.placeholder'), validate: {\r\n                            required: { value: true, errorMessage: translate('settings.messages.validate.lastname.required') },\r\n                            minLength: { value: 1, errorMessage: translate('settings.messages.validate.lastname.minlength') },\r\n                            maxLength: { value: 50, errorMessage: translate('settings.messages.validate.lastname.maxlength') }\r\n                        }, value: props.account.lastName }),\r\n                    React.createElement(AvField, { name: \"email\", label: translate('global.form.email.label'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\r\n                            required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\r\n                            minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\r\n                            maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\r\n                        }, value: props.account.email }),\r\n                    React.createElement(AvField, { type: \"select\", id: \"langKey\", name: \"langKey\", className: \"form-control\", label: translate('settings.form.language'), value: props.account.langKey }, locales.map(locale => (React.createElement(\"option\", { value: locale, key: locale }, languages[locale].name)))),\r\n                    React.createElement(Button, { color: \"primary\", type: \"submit\" },\r\n                        React.createElement(Translate, { contentKey: \"settings.form.button\" }, \"Save\")))))));\r\n};\r\nconst mapStateToProps = ({ authentication }) => ({\r\n    account: authentication.account,\r\n    isAuthenticated: authentication.isAuthenticated\r\n});\r\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\r\n",{"version":3,"file":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.tsx","sourceRoot":"","sources":["C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,GAAG,EAAS,GAAG,EAAE,MAAM,YAAY,CAAC;AACrD,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACtD,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,gCAAgC,CAAC;AAEjE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAE5D,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAE,mBAAmB,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAIhE,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,KAAyB,EAAE,EAAE;IACxD,SAAS,CAAC,GAAG,EAAE;QACb,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,OAAO,GAAG,EAAE;YACV,KAAK,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QAC1C,MAAM,OAAO,qBACR,KAAK,CAAC,OAAO,EACb,MAAM,CACV,CAAC;QAEF,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACnC,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC,CAAC;IAEF,OAAO,CACL;QACE,oBAAC,GAAG,IAAC,SAAS,EAAC,wBAAwB;YACrC,oBAAC,GAAG,IAAC,EAAE,EAAC,GAAG;gBACT,4BAAI,EAAE,EAAC,gBAAgB;oBACrB,oBAAC,SAAS,IAAC,UAAU,EAAC,gBAAgB,EAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE;;wBAChE,KAAK,CAAC,OAAO,CAAC,KAAK,CAC5B,CACT;gBACL,oBAAC,MAAM,IAAC,EAAE,EAAC,eAAe,EAAC,aAAa,EAAE,iBAAiB;oBAEzD,oBAAC,OAAO,IACN,SAAS,EAAC,cAAc,EACxB,IAAI,EAAC,WAAW,EAChB,KAAK,EAAE,SAAS,CAAC,yBAAyB,CAAC,EAC3C,EAAE,EAAC,WAAW,EACd,WAAW,EAAE,SAAS,CAAC,qCAAqC,CAAC,EAC7D,QAAQ,EAAE;4BACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,+CAA+C,CAAC,EAAE;4BACnG,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,gDAAgD,CAAC,EAAE;4BAClG,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,CAAC,gDAAgD,CAAC,EAAE;yBACpG,EACD,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,SAAS,GAC9B;oBAEF,oBAAC,OAAO,IACN,SAAS,EAAC,cAAc,EACxB,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,SAAS,CAAC,wBAAwB,CAAC,EAC1C,EAAE,EAAC,UAAU,EACb,WAAW,EAAE,SAAS,CAAC,oCAAoC,CAAC,EAC5D,QAAQ,EAAE;4BACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,8CAA8C,CAAC,EAAE;4BAClG,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,+CAA+C,CAAC,EAAE;4BACjG,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,CAAC,+CAA+C,CAAC,EAAE;yBACnG,EACD,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ,GAC7B;oBAEF,oBAAC,OAAO,IACN,IAAI,EAAC,OAAO,EACZ,KAAK,EAAE,SAAS,CAAC,yBAAyB,CAAC,EAC3C,WAAW,EAAE,SAAS,CAAC,+BAA+B,CAAC,EACvD,IAAI,EAAC,OAAO,EACZ,QAAQ,EAAE;4BACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,yCAAyC,CAAC,EAAE;4BAC7F,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;4BAC5F,SAAS,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;yBAC/F,EACD,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,GAC1B;oBAEF,oBAAC,OAAO,IACN,IAAI,EAAC,QAAQ,EACb,EAAE,EAAC,SAAS,EACZ,IAAI,EAAC,SAAS,EACd,SAAS,EAAC,cAAc,EACxB,KAAK,EAAE,SAAS,CAAC,wBAAwB,CAAC,EAC1C,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO,IAE3B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CACrB,gCAAQ,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,IAC/B,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAChB,CACV,CAAC,CACM;oBACV,oBAAC,MAAM,IAAC,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,QAAQ;wBACnC,oBAAC,SAAS,IAAC,UAAU,EAAC,sBAAsB,WAAiB,CACtD,CACF,CACL,CACF,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,EAAE,cAAc,EAAc,EAAE,EAAE,CAAC,CAAC;IAC3D,OAAO,EAAE,cAAc,CAAC,OAAO;IAC/B,eAAe,EAAE,cAAc,CAAC,eAAe;CAChD,CAAC,CAAC;AAEH,MAAM,kBAAkB,GAAG,EAAE,UAAU,EAAE,mBAAmB,EAAE,KAAK,EAAE,CAAC;AAKtE,eAAe,OAAO,CACpB,eAAe,EACf,kBAAkB,CACnB,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Button, Col, Alert, Row } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Translate, translate } from 'react-jhipster';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\n\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport { saveAccountSettings, reset } from './settings.reducer';\r\n\r\nexport interface IUserSettingsProps extends StateProps, DispatchProps {}\r\n\r\nexport const SettingsPage = (props: IUserSettingsProps) => {\r\n  useEffect(() => {\r\n    props.getSession();\r\n    return () => {\r\n      props.reset();\r\n    };\r\n  }, []);\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    const account = {\r\n      ...props.account,\r\n      ...values\r\n    };\r\n\r\n    props.saveAccountSettings(account);\r\n    event.persist();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h2 id=\"settings-title\">\r\n            <Translate contentKey=\"settings.title\" interpolate={{ username: props.account.login }}>\r\n              User settings for {props.account.login}\r\n            </Translate>\r\n          </h2>\r\n          <AvForm id=\"settings-form\" onValidSubmit={handleValidSubmit}>\r\n            {/* First name */}\r\n            <AvField\r\n              className=\"form-control\"\r\n              name=\"firstName\"\r\n              label={translate('settings.form.firstname')}\r\n              id=\"firstName\"\r\n              placeholder={translate('settings.form.firstname.placeholder')}\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('settings.messages.validate.firstname.required') },\r\n                minLength: { value: 1, errorMessage: translate('settings.messages.validate.firstname.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('settings.messages.validate.firstname.maxlength') }\r\n              }}\r\n              value={props.account.firstName}\r\n            />\r\n            {/* Last name */}\r\n            <AvField\r\n              className=\"form-control\"\r\n              name=\"lastName\"\r\n              label={translate('settings.form.lastname')}\r\n              id=\"lastName\"\r\n              placeholder={translate('settings.form.lastname.placeholder')}\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('settings.messages.validate.lastname.required') },\r\n                minLength: { value: 1, errorMessage: translate('settings.messages.validate.lastname.minlength') },\r\n                maxLength: { value: 50, errorMessage: translate('settings.messages.validate.lastname.maxlength') }\r\n              }}\r\n              value={props.account.lastName}\r\n            />\r\n            {/* Email */}\r\n            <AvField\r\n              name=\"email\"\r\n              label={translate('global.form.email.label')}\r\n              placeholder={translate('global.form.email.placeholder')}\r\n              type=\"email\"\r\n              validate={{\r\n                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\r\n                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\r\n                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\r\n              }}\r\n              value={props.account.email}\r\n            />\r\n            {/* Language key */}\r\n            <AvField\r\n              type=\"select\"\r\n              id=\"langKey\"\r\n              name=\"langKey\"\r\n              className=\"form-control\"\r\n              label={translate('settings.form.language')}\r\n              value={props.account.langKey}\r\n            >\r\n              {locales.map(locale => (\r\n                <option value={locale} key={locale}>\r\n                  {languages[locale].name}\r\n                </option>\r\n              ))}\r\n            </AvField>\r\n            <Button color=\"primary\" type=\"submit\">\r\n              <Translate contentKey=\"settings.form.button\">Save</Translate>\r\n            </Button>\r\n          </AvForm>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ authentication }: IRootState) => ({\r\n  account: authentication.account,\r\n  isAuthenticated: authentication.isAuthenticated\r\n});\r\n\r\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SettingsPage);\r\n"]}]}