{"remainingRequest":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\expiration\\expiration-update.tsx","dependencies":[{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\expiration\\expiration-update.tsx","mtime":1588426126958},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, setFileData } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getCompanies } from 'app/entities/company/company.reducer';\r\nimport { getEntities as getEmployees } from 'app/entities/employee/employee.reducer';\r\nimport { getEntities as getStudies } from 'app/entities/study/study.reducer';\r\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './expiration.reducer';\r\nexport class ExpirationUpdate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onBlobChange = (isAnImage, name) => event => {\r\n            setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType), isAnImage);\r\n        };\r\n        this.clearBlob = name => () => {\r\n            this.props.setBlob(name, undefined, undefined);\r\n        };\r\n        this.saveEntity = (event, errors, values) => {\r\n            if (errors.length === 0) {\r\n                const { expirationEntity } = this.props;\r\n                const entity = Object.assign({}, expirationEntity, values);\r\n                if (this.state.isNew) {\r\n                    this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        this.handleClose = () => {\r\n            this.props.history.push('/expiration');\r\n        };\r\n        this.state = {\r\n            companyId: '0',\r\n            employeeId: '0',\r\n            studyId: '0',\r\n            isNew: !this.props.match.params || !this.props.match.params.id\r\n        };\r\n    }\r\n    componentWillUpdate(nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (!this.state.isNew) {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getCompanies();\r\n        this.props.getEmployees();\r\n        this.props.getStudies();\r\n    }\r\n    render() {\r\n        const { expirationEntity, companies, employees, studies, loading, updating } = this.props;\r\n        const { isNew } = this.state;\r\n        const { comments } = expirationEntity;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"sepaApp.expiration.home.createOrEditLabel\" },\r\n                        React.createElement(Translate, { contentKey: \"sepaApp.expiration.home.createOrEditLabel\" }, \"Create or edit a Expiration\")))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : expirationEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"expiration-id\" },\r\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\r\n                        React.createElement(AvInput, { id: \"expiration-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"uniqueCodeLabel\", for: \"expiration-uniqueCode\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.uniqueCode\" }, \"Unique Code\"),\r\n                            React.createElement(\"br\", null),\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.detail.automaticField\" }, \"Automatic Field\")),\r\n                        React.createElement(AvInput, { id: \"expiration-uniqueCode\", type: \"text\", name: \"uniqueCode\", readOnly: true })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"expiration-company\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.company\" }, \"Company\")),\r\n                        React.createElement(AvInput, { id: \"expiration-company\", type: \"select\", className: \"form-control\", name: \"company.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            companies\r\n                                ? companies.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.name + \" - \" + otherEntity.addressDirection + \" \" + otherEntity.addressNumber)))\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"responsibleLabel\", for: \"expiration-responsible\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.responsible\" }, \"Responsible\"),\r\n                            React.createElement(\"br\", null),\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.detail.automaticField\" }, \"Automatic Field\")),\r\n                        React.createElement(AvField, { id: \"expiration-responsible\", type: \"text\", name: \"responsible\", readOnly: true })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"expiration-study\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.study\" }, \"Study\")),\r\n                        React.createElement(AvInput, { id: \"expiration-study\", type: \"select\", className: \"form-control\", name: \"study.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            studies\r\n                                ? studies.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.name)))\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"statusLabel\", for: \"expiration-status\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.status\" }, \"Status\")),\r\n                        React.createElement(AvInput, { id: \"expiration-status\", type: \"select\", className: \"form-control\", name: \"status\", value: (!isNew && expirationEntity.status) || 'VENCIDO' },\r\n                            React.createElement(\"option\", { value: \"VENCIDO\" }, translate('sepaApp.Status.VENCIDO')),\r\n                            React.createElement(\"option\", { value: \"A_VENCER\" }, translate('sepaApp.Status.A_VENCER')),\r\n                            React.createElement(\"option\", { value: \"PENDIENTE\" }, translate('sepaApp.Status.PENDIENTE')),\r\n                            React.createElement(\"option\", { value: \"VIGENTE\" }, translate('sepaApp.Status.VIGENTE')),\r\n                            React.createElement(\"option\", { value: \"ANTIGUO\" }, translate('sepaApp.Status.ANTIGUO')),\r\n                            React.createElement(\"option\", { value: \"SIN_FECHA\" }, translate('sepaApp.Status.SIN_FECHA')))),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"startDateLabel\", for: \"expiration-startDate\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.startDate\" }, \"Start Date\")),\r\n                        React.createElement(AvField, { id: \"expiration-startDate\", type: \"date\", className: \"form-control\", name: \"startDate\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"endDateLabel\", for: \"expiration-endDate\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.endDate\" }, \"End Date\")),\r\n                        React.createElement(AvField, { id: \"expiration-endDate\", type: \"date\", className: \"form-control\", name: \"endDate\" })),\r\n                    React.createElement(AvGroup, { check: true },\r\n                        React.createElement(Label, { id: \"isCompletedLabel\" },\r\n                            React.createElement(AvInput, { id: \"expiration-isCompleted\", type: \"checkbox\", className: \"form-check-input\", name: \"isCompleted\" }),\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.isCompleted\" }, \"Is Completed\"))),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"expiration-employee\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.employee\" }, \"Employee\")),\r\n                        React.createElement(AvInput, { id: \"expiration-employee\", type: \"select\", className: \"form-control\", name: \"employee.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            employees\r\n                                ? employees.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.name + \" \" + otherEntity.surname)))\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"commentsLabel\", for: \"expiration-comments\" },\r\n                            React.createElement(Translate, { contentKey: \"sepaApp.expiration.comments\" }, \"Comments\")),\r\n                        React.createElement(AvInput, { id: \"expiration-comments\", type: \"textarea\", name: \"comments\" })),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/expiration\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                            React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\r\n    }\r\n}\r\nconst mapStateToProps = (storeState) => ({\r\n    companies: storeState.company.entities,\r\n    employees: storeState.employee.entities,\r\n    studies: storeState.study.entities,\r\n    expirationEntity: storeState.expiration.entity,\r\n    loading: storeState.expiration.loading,\r\n    updating: storeState.expiration.updating,\r\n    updateSuccess: storeState.expiration.updateSuccess\r\n});\r\nconst mapDispatchToProps = {\r\n    getCompanies,\r\n    getEmployees,\r\n    getStudies,\r\n    getEntity,\r\n    updateEntity,\r\n    setBlob,\r\n    createEntity,\r\n    reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpirationUpdate);\r\n",{"version":3,"file":"C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\expiration\\expiration-update.tsx","sourceRoot":"","sources":["C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\Users\\User ssd\\Desktop\\programacion\\trabajo\\app git\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\entities\\expiration\\expiration-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvFeedback, AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, setFileData, byteSize, ICrudPutAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nimport { ICompany } from 'app/shared/model/company.model';\r\nimport { getEntities as getCompanies } from 'app/entities/company/company.reducer';\r\nimport { IEmployee } from 'app/shared/model/employee.model';\r\nimport { getEntities as getEmployees } from 'app/entities/employee/employee.reducer';\r\nimport { IStudy } from 'app/shared/model/study.model';\r\nimport { getEntities as getStudies } from 'app/entities/study/study.reducer';\r\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './expiration.reducer';\r\nimport { IExpiration } from 'app/shared/model/expiration.model';\r\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\r\nimport { mapIdList } from 'app/shared/util/entity-utils';\r\nimport { Expiration } from './expiration';\r\n\r\nexport interface IExpirationUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface IExpirationUpdateState {\r\n  isNew: boolean;\r\n  companyId: string;\r\n  employeeId: string;\r\n  studyId: string;\r\n}\r\n\r\nexport class ExpirationUpdate extends React.Component<IExpirationUpdateProps, IExpirationUpdateState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      companyId: '0',\r\n      employeeId: '0',\r\n      studyId: '0',\r\n      isNew: !this.props.match.params || !this.props.match.params.id\r\n    };\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n      this.handleClose();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.state.isNew) {\r\n      this.props.getEntity(this.props.match.params.id);\r\n    }\r\n\r\n    this.props.getCompanies();\r\n    this.props.getEmployees();\r\n    this.props.getStudies();\r\n  }\r\n\r\n  onBlobChange = (isAnImage, name) => event => {\r\n    setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType), isAnImage);\r\n  };\r\n\r\n  clearBlob = name => () => {\r\n    this.props.setBlob(name, undefined, undefined);\r\n  };\r\n\r\n  saveEntity = (event, errors, values) => {\r\n    if (errors.length === 0) {\r\n      const { expirationEntity } = this.props;\r\n      const entity = {\r\n        ...expirationEntity,\r\n        ...values\r\n      };\r\n\r\n      if (this.state.isNew) {\r\n        this.props.createEntity(entity);\r\n      } else {\r\n        this.props.updateEntity(entity);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.history.push('/expiration');\r\n  };\r\n\r\n  render() {\r\n    const { expirationEntity, companies, employees, studies, loading, updating } = this.props;\r\n    const { isNew } = this.state;\r\n\r\n    const { comments } = expirationEntity;\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h2 id=\"sepaApp.expiration.home.createOrEditLabel\">\r\n              <Translate contentKey=\"sepaApp.expiration.home.createOrEditLabel\">Create or edit a Expiration</Translate>\r\n            </h2>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            {loading ? (\r\n              <p>Loading...</p>\r\n            ) : (\r\n              <AvForm model={isNew ? {} : expirationEntity} onSubmit={this.saveEntity}>\r\n                {!isNew ? (\r\n                  <AvGroup>\r\n                    <Label for=\"expiration-id\">\r\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\r\n                    </Label>\r\n                    <AvInput id=\"expiration-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\r\n                  </AvGroup>\r\n                ) : null}\r\n                <AvGroup>\r\n                  <Label id=\"uniqueCodeLabel\" for=\"expiration-uniqueCode\">\r\n                    <Translate contentKey=\"sepaApp.expiration.uniqueCode\">Unique Code</Translate>\r\n                  <br></br>\r\n                    <Translate contentKey=\"sepaApp.expiration.detail.automaticField\">Automatic Field</Translate>\r\n                  </Label>\r\n                  <AvInput id=\"expiration-uniqueCode\" type=\"text\" name=\"uniqueCode\" readOnly/>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"expiration-company\">\r\n                    <Translate contentKey=\"sepaApp.expiration.company\">Company</Translate>\r\n                  </Label>\r\n                  <AvInput id=\"expiration-company\" type=\"select\" className=\"form-control\" name=\"company.id\">\r\n                    <option value=\"\" key=\"0\" />\r\n                    {companies\r\n                      ? companies.map(otherEntity => (\r\n                          <option value={otherEntity.id} key={otherEntity.id}>\r\n                            {otherEntity.name + \" - \" + otherEntity.addressDirection + \" \" + otherEntity.addressNumber}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"responsibleLabel\" for=\"expiration-responsible\">\r\n                    <Translate contentKey=\"sepaApp.expiration.responsible\">Responsible</Translate>\r\n                    <br></br>\r\n                    <Translate contentKey=\"sepaApp.expiration.detail.automaticField\">Automatic Field</Translate>\r\n                  </Label>\r\n                  <AvField id=\"expiration-responsible\" type=\"text\" name=\"responsible\" readOnly/>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"expiration-study\">\r\n                    <Translate contentKey=\"sepaApp.expiration.study\">Study</Translate>\r\n                  </Label>\r\n                  <AvInput id=\"expiration-study\" type=\"select\" className=\"form-control\" name=\"study.id\">\r\n                    <option value=\"\" key=\"0\" />\r\n                    {studies\r\n                      ? studies.map(otherEntity => (\r\n                          <option value={otherEntity.id} key={otherEntity.id}>\r\n                            {otherEntity.name}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"statusLabel\" for=\"expiration-status\">\r\n                    <Translate contentKey=\"sepaApp.expiration.status\">Status</Translate>\r\n                  </Label>\r\n                  <AvInput\r\n                    id=\"expiration-status\"\r\n                    type=\"select\"\r\n                    className=\"form-control\"\r\n                    name=\"status\"\r\n                    value={(!isNew && expirationEntity.status) || 'VENCIDO'}\r\n                  >\r\n                    <option value=\"VENCIDO\">{translate('sepaApp.Status.VENCIDO')}</option>\r\n                    <option value=\"A_VENCER\">{translate('sepaApp.Status.A_VENCER')}</option>\r\n                    <option value=\"PENDIENTE\">{translate('sepaApp.Status.PENDIENTE')}</option>\r\n                    <option value=\"VIGENTE\">{translate('sepaApp.Status.VIGENTE')}</option>\r\n                    <option value=\"ANTIGUO\">{translate('sepaApp.Status.ANTIGUO')}</option>\r\n                    <option value=\"SIN_FECHA\">{translate('sepaApp.Status.SIN_FECHA')}</option>\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"startDateLabel\" for=\"expiration-startDate\">\r\n                    <Translate contentKey=\"sepaApp.expiration.startDate\">Start Date</Translate>\r\n                  </Label>\r\n                  <AvField id=\"expiration-startDate\" type=\"date\" className=\"form-control\" name=\"startDate\" />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"endDateLabel\" for=\"expiration-endDate\">\r\n                    <Translate contentKey=\"sepaApp.expiration.endDate\">End Date</Translate>\r\n                  </Label>\r\n                  <AvField id=\"expiration-endDate\" type=\"date\" className=\"form-control\" name=\"endDate\" />\r\n                </AvGroup>\r\n                <AvGroup check>\r\n                  <Label id=\"isCompletedLabel\">\r\n                    <AvInput id=\"expiration-isCompleted\" type=\"checkbox\" className=\"form-check-input\" name=\"isCompleted\" />\r\n                    <Translate contentKey=\"sepaApp.expiration.isCompleted\">Is Completed</Translate>\r\n                  </Label>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"expiration-employee\">\r\n                    <Translate contentKey=\"sepaApp.expiration.employee\">Employee</Translate>\r\n                  </Label>\r\n                  <AvInput id=\"expiration-employee\" type=\"select\" className=\"form-control\" name=\"employee.id\">\r\n                    <option value=\"\" key=\"0\" />\r\n                    {employees\r\n                      ? employees.map(otherEntity => (\r\n                          <option value={otherEntity.id} key={otherEntity.id}>\r\n                            {otherEntity.name + \" \" + otherEntity.surname}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"commentsLabel\" for=\"expiration-comments\">\r\n                    <Translate contentKey=\"sepaApp.expiration.comments\">Comments</Translate>\r\n                  </Label>\r\n                  <AvInput id=\"expiration-comments\" type=\"textarea\" name=\"comments\" />\r\n                </AvGroup>\r\n                <Button tag={Link} id=\"cancel-save\" to=\"/expiration\" replace color=\"info\">\r\n                  <FontAwesomeIcon icon=\"arrow-left\" />\r\n                  &nbsp;\r\n                  <span className=\"d-none d-md-inline\">\r\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\r\n                  </span>\r\n                </Button>\r\n                &nbsp;\r\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\r\n                  <FontAwesomeIcon icon=\"save\" />\r\n                  &nbsp;\r\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\r\n                </Button>\r\n              </AvForm>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  companies: storeState.company.entities,\r\n  employees: storeState.employee.entities,\r\n  studies: storeState.study.entities,\r\n  expirationEntity: storeState.expiration.entity,\r\n  loading: storeState.expiration.loading,\r\n  updating: storeState.expiration.updating,\r\n  updateSuccess: storeState.expiration.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getCompanies,\r\n  getEmployees,\r\n  getStudies,\r\n  getEntity,\r\n  updateEntity,\r\n  setBlob,\r\n  createEntity,\r\n  reset\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ExpirationUpdate);\r\n"]}]}