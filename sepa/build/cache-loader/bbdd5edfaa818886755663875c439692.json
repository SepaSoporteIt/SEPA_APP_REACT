{"remainingRequest":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management.tsx","dependencies":[{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management.tsx","mtime":1580568107573},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Table, Row, Badge } from 'reactstrap';\r\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nimport { getUsers, updateUser } from './user-management.reducer';\r\nexport const UserManagement = (props) => {\r\n    const [pagination, setPagination] = useState(getSortState(props.location, ITEMS_PER_PAGE));\r\n    const getAllUsers = () => props.getUsers(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`);\r\n    useEffect(() => {\r\n        getAllUsers();\r\n    }, []);\r\n    const sortUsers = () => getAllUsers();\r\n    useEffect(() => {\r\n        sortUsers();\r\n    }, [pagination.activePage, pagination.order, pagination.sort]);\r\n    const sort = p => () => {\r\n        setPagination(Object.assign({}, pagination, { order: pagination.order === 'asc' ? 'desc' : 'asc', sort: p }));\r\n        props.history.push(`${props.location.pathname}?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`);\r\n    };\r\n    const handlePagination = currentPage => setPagination(Object.assign({}, pagination, { activePage: currentPage }));\r\n    const toggleActive = user => () => props.updateUser(Object.assign({}, user, { activated: !user.activated }));\r\n    const { users, account, match, totalItems } = props;\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(\"h2\", { id: \"user-management-page-heading\" },\r\n            React.createElement(Translate, { contentKey: \"userManagement.home.title\" }, \"Users\"),\r\n            React.createElement(Link, { to: `${match.url}/new`, className: \"btn btn-primary float-right jh-create-entity\" },\r\n                React.createElement(FontAwesomeIcon, { icon: \"plus\" }),\r\n                \" \",\r\n                React.createElement(Translate, { contentKey: \"userManagement.home.createLabel\" }, \"Create a new user\"))),\r\n        React.createElement(Table, { responsive: true, striped: true },\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('id') },\r\n                        React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\"),\r\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('login') },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.login\" }, \"Login\"),\r\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('email') },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.email\" }, \"Email\"),\r\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                    React.createElement(\"th\", null),\r\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('langKey') },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.langKey\" }, \"Lang Key\"),\r\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                    React.createElement(\"th\", null,\r\n                        React.createElement(Translate, { contentKey: \"userManagement.profiles\" }, \"Profiles\")),\r\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('createdDate') },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.createdDate\" }, \"Created Date\"),\r\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('lastModifiedBy') },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.lastModifiedBy\" }, \"Last Modified By\"),\r\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                    React.createElement(\"th\", { id: \"modified-date-sort\", className: \"hand\", onClick: sort('lastModifiedDate') },\r\n                        React.createElement(Translate, { contentKey: \"userManagement.lastModifiedDate\" }, \"Last Modified Date\"),\r\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                    React.createElement(\"th\", null))),\r\n            React.createElement(\"tbody\", null, users.map((user, i) => (React.createElement(\"tr\", { id: user.login, key: `user-${i}` },\r\n                React.createElement(\"td\", null,\r\n                    React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}`, color: \"link\", size: \"sm\" }, user.id)),\r\n                React.createElement(\"td\", null, user.login),\r\n                React.createElement(\"td\", null, user.email),\r\n                React.createElement(\"td\", null, user.activated ? (React.createElement(Button, { color: \"success\", onClick: toggleActive(user) }, \"Activated\")) : (React.createElement(Button, { color: \"danger\", onClick: toggleActive(user) }, \"Deactivated\"))),\r\n                React.createElement(\"td\", null, user.langKey),\r\n                React.createElement(\"td\", null, user.authorities\r\n                    ? user.authorities.map((authority, j) => (React.createElement(\"div\", { key: `user-auth-${i}-${j}` },\r\n                        React.createElement(Badge, { color: \"info\" }, authority))))\r\n                    : null),\r\n                React.createElement(\"td\", null,\r\n                    React.createElement(TextFormat, { value: user.createdDate, type: \"date\", format: APP_DATE_FORMAT, blankOnInvalid: true })),\r\n                React.createElement(\"td\", null, user.lastModifiedBy),\r\n                React.createElement(\"td\", null,\r\n                    React.createElement(TextFormat, { value: user.lastModifiedDate, type: \"date\", format: APP_DATE_FORMAT, blankOnInvalid: true })),\r\n                React.createElement(\"td\", { className: \"text-right\" },\r\n                    React.createElement(\"div\", { className: \"btn-group flex-btn-group-container\" },\r\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}`, color: \"info\", size: \"sm\" },\r\n                            React.createElement(FontAwesomeIcon, { icon: \"eye\" }),\r\n                            ' ',\r\n                            React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                React.createElement(Translate, { contentKey: \"entity.action.view\" }, \"View\"))),\r\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}/edit`, color: \"primary\", size: \"sm\" },\r\n                            React.createElement(FontAwesomeIcon, { icon: \"pencil-alt\" }),\r\n                            ' ',\r\n                            React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                React.createElement(Translate, { contentKey: \"entity.action.edit\" }, \"Edit\"))),\r\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}/delete`, color: \"danger\", size: \"sm\", disabled: account.login === user.login },\r\n                            React.createElement(FontAwesomeIcon, { icon: \"trash\" }),\r\n                            ' ',\r\n                            React.createElement(\"span\", { className: \"d-none d-md-inline\" },\r\n                                React.createElement(Translate, { contentKey: \"entity.action.delete\" }, \"Delete\")))))))))),\r\n        React.createElement(\"div\", { className: users && users.length > 0 ? '' : 'd-none' },\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(JhiItemCount, { page: pagination.activePage, total: totalItems, itemsPerPage: pagination.itemsPerPage, i18nEnabled: true })),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(JhiPagination, { activePage: pagination.activePage, onSelect: handlePagination, maxButtons: 5, itemsPerPage: pagination.itemsPerPage, totalItems: props.totalItems })))));\r\n};\r\nconst mapStateToProps = (storeState) => ({\r\n    users: storeState.userManagement.users,\r\n    totalItems: storeState.userManagement.totalItems,\r\n    account: storeState.authentication.account\r\n});\r\nconst mapDispatchToProps = { getUsers, updateUser };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagement);\r\n",{"version":3,"file":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management.tsx","sourceRoot":"","sources":["C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\user-management\\user-management.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Table, Row, Badge } from 'reactstrap';\r\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nimport { getUsers, updateUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\r\n\r\nexport const UserManagement = (props: IUserManagementProps) => {\r\n  const [pagination, setPagination] = useState(getSortState(props.location, ITEMS_PER_PAGE));\r\n\r\n  const getAllUsers = () => props.getUsers(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`);\r\n\r\n  useEffect(() => {\r\n    getAllUsers();\r\n  }, []);\r\n\r\n  const sortUsers = () => getAllUsers();\r\n\r\n  useEffect(() => {\r\n    sortUsers();\r\n  }, [pagination.activePage, pagination.order, pagination.sort]);\r\n\r\n  const sort = p => () => {\r\n    setPagination({\r\n      ...pagination,\r\n      order: pagination.order === 'asc' ? 'desc' : 'asc',\r\n      sort: p\r\n    });\r\n    props.history.push(`${props.location.pathname}?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`);\r\n  };\r\n\r\n  const handlePagination = currentPage =>\r\n    setPagination({\r\n      ...pagination,\r\n      activePage: currentPage\r\n    });\r\n\r\n  const toggleActive = user => () =>\r\n    props.updateUser({\r\n      ...user,\r\n      activated: !user.activated\r\n    });\r\n\r\n  const { users, account, match, totalItems } = props;\r\n  return (\r\n    <div>\r\n      <h2 id=\"user-management-page-heading\">\r\n        <Translate contentKey=\"userManagement.home.title\">Users</Translate>\r\n        <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\r\n          <FontAwesomeIcon icon=\"plus\" /> <Translate contentKey=\"userManagement.home.createLabel\">Create a new user</Translate>\r\n        </Link>\r\n      </h2>\r\n      <Table responsive striped>\r\n        <thead>\r\n          <tr>\r\n            <th className=\"hand\" onClick={sort('id')}>\r\n              <Translate contentKey=\"global.field.id\">ID</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('login')}>\r\n              <Translate contentKey=\"userManagement.login\">Login</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('email')}>\r\n              <Translate contentKey=\"userManagement.email\">Email</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th />\r\n            <th className=\"hand\" onClick={sort('langKey')}>\r\n              <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th>\r\n              <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('createdDate')}>\r\n              <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('lastModifiedBy')}>\r\n              <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th id=\"modified-date-sort\" className=\"hand\" onClick={sort('lastModifiedDate')}>\r\n              <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user, i) => (\r\n            <tr id={user.login} key={`user-${i}`}>\r\n              <td>\r\n                <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\r\n                  {user.id}\r\n                </Button>\r\n              </td>\r\n              <td>{user.login}</td>\r\n              <td>{user.email}</td>\r\n              <td>\r\n                {user.activated ? (\r\n                  <Button color=\"success\" onClick={toggleActive(user)}>\r\n                    Activated\r\n                  </Button>\r\n                ) : (\r\n                  <Button color=\"danger\" onClick={toggleActive(user)}>\r\n                    Deactivated\r\n                  </Button>\r\n                )}\r\n              </td>\r\n              <td>{user.langKey}</td>\r\n              <td>\r\n                {user.authorities\r\n                  ? user.authorities.map((authority, j) => (\r\n                      <div key={`user-auth-${i}-${j}`}>\r\n                        <Badge color=\"info\">{authority}</Badge>\r\n                      </div>\r\n                    ))\r\n                  : null}\r\n              </td>\r\n              <td>\r\n                <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n              </td>\r\n              <td>{user.lastModifiedBy}</td>\r\n              <td>\r\n                <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n              </td>\r\n              <td className=\"text-right\">\r\n                <div className=\"btn-group flex-btn-group-container\">\r\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\r\n                    <FontAwesomeIcon icon=\"eye\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.view\">View</Translate>\r\n                    </span>\r\n                  </Button>\r\n                  <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\r\n                    <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.edit\">Edit</Translate>\r\n                    </span>\r\n                  </Button>\r\n                  <Button\r\n                    tag={Link}\r\n                    to={`${match.url}/${user.login}/delete`}\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    disabled={account.login === user.login}\r\n                  >\r\n                    <FontAwesomeIcon icon=\"trash\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.delete\">Delete</Translate>\r\n                    </span>\r\n                  </Button>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n      <div className={users && users.length > 0 ? '' : 'd-none'}>\r\n        <Row className=\"justify-content-center\">\r\n          <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <JhiPagination\r\n            activePage={pagination.activePage}\r\n            onSelect={handlePagination}\r\n            maxButtons={5}\r\n            itemsPerPage={pagination.itemsPerPage}\r\n            totalItems={props.totalItems}\r\n          />\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  users: storeState.userManagement.users,\r\n  totalItems: storeState.userManagement.totalItems,\r\n  account: storeState.authentication.account\r\n});\r\n\r\nconst mapDispatchToProps = { getUsers, updateUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagement);\r\n"]}]}