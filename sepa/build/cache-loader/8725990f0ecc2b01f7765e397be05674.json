{"remainingRequest":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\config\\error-middleware.ts","dependencies":[{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\config\\error-middleware.ts","mtime":1580568107190},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { isPromise } from 'react-jhipster';\r\nconst getErrorMessage = errorData => {\r\n    let message = errorData.message;\r\n    if (errorData.fieldErrors) {\r\n        errorData.fieldErrors.forEach(fErr => {\r\n            message += `\\nfield: ${fErr.field},  Object: ${fErr.objectName}, message: ${fErr.message}\\n`;\r\n        });\r\n    }\r\n    return message;\r\n};\r\nexport default () => next => action => {\r\n    // If not a promise, continue on\r\n    if (!isPromise(action.payload)) {\r\n        return next(action);\r\n    }\r\n    /**\r\n     *\r\n     * The error middleware serves to dispatch the initial pending promise to\r\n     * the promise middleware, but adds a `catch`.\r\n     * It need not run in production\r\n     */\r\n    if (process.env.NODE_ENV === 'development') {\r\n        // Dispatch initial pending promise, but catch any errors\r\n        return next(action).catch(error => {\r\n            console.error(`${action.type} caught at middleware with reason: ${JSON.stringify(error.message)}.`);\r\n            if (error && error.response && error.response.data) {\r\n                const message = getErrorMessage(error.response.data);\r\n                console.error(`Actual cause: ${message}`);\r\n            }\r\n            return Promise.reject(error);\r\n        });\r\n    }\r\n    return next(action);\r\n};\r\n",{"version":3,"file":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\config\\error-middleware.ts","sourceRoot":"","sources":["C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\config\\error-middleware.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,MAAM,eAAe,GAAG,SAAS,CAAC,EAAE;IAClC,IAAI,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;IAChC,IAAI,SAAS,CAAC,WAAW,EAAE;QACzB,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnC,OAAO,IAAI,YAAY,IAAI,CAAC,KAAK,cAAc,IAAI,CAAC,UAAU,cAAc,IAAI,CAAC,OAAO,IAAI,CAAC;QAC/F,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,eAAe,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;IACpC,gCAAgC;IAChC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;KACrB;IAED;;;;;OAKG;IACH,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;QAC1C,yDAAyD;QACzD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAChC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,sCAAsC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACpG,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;gBAClD,MAAM,OAAO,GAAG,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACrD,OAAO,CAAC,KAAK,CAAC,iBAAiB,OAAO,EAAE,CAAC,CAAC;aAC3C;YAED,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC,CAAC","sourcesContent":["import { isPromise } from 'react-jhipster';\r\n\r\nconst getErrorMessage = errorData => {\r\n  let message = errorData.message;\r\n  if (errorData.fieldErrors) {\r\n    errorData.fieldErrors.forEach(fErr => {\r\n      message += `\\nfield: ${fErr.field},  Object: ${fErr.objectName}, message: ${fErr.message}\\n`;\r\n    });\r\n  }\r\n  return message;\r\n};\r\n\r\nexport default () => next => action => {\r\n  // If not a promise, continue on\r\n  if (!isPromise(action.payload)) {\r\n    return next(action);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * The error middleware serves to dispatch the initial pending promise to\r\n   * the promise middleware, but adds a `catch`.\r\n   * It need not run in production\r\n   */\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // Dispatch initial pending promise, but catch any errors\r\n    return next(action).catch(error => {\r\n      console.error(`${action.type} caught at middleware with reason: ${JSON.stringify(error.message)}.`);\r\n      if (error && error.response && error.response.data) {\r\n        const message = getErrorMessage(error.response.data);\r\n        console.error(`Actual cause: ${message}`);\r\n      }\r\n\r\n      return Promise.reject(error);\r\n    });\r\n  }\r\n  return next(action);\r\n};\r\n"]}]}