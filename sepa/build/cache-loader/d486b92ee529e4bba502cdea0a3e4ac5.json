{"remainingRequest":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\administration.reducer.ts","dependencies":[{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\administration.reducer.ts","mtime":1580568107538},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\react-hot-loader\\webpack.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\nexport const ACTION_TYPES = {\r\n    FETCH_LOGS: 'administration/FETCH_LOGS',\r\n    FETCH_LOGS_CHANGE_LEVEL: 'administration/FETCH_LOGS_CHANGE_LEVEL',\r\n    FETCH_HEALTH: 'administration/FETCH_HEALTH',\r\n    FETCH_METRICS: 'administration/FETCH_METRICS',\r\n    FETCH_THREAD_DUMP: 'administration/FETCH_THREAD_DUMP',\r\n    FETCH_CONFIGURATIONS: 'administration/FETCH_CONFIGURATIONS',\r\n    FETCH_ENV: 'administration/FETCH_ENV',\r\n    FETCH_AUDITS: 'administration/FETCH_AUDITS'\r\n};\r\nconst initialState = {\r\n    loading: false,\r\n    errorMessage: null,\r\n    logs: {\r\n        loggers: []\r\n    },\r\n    health: {},\r\n    metrics: {},\r\n    threadDump: [],\r\n    configuration: {\r\n        configProps: {},\r\n        env: {}\r\n    },\r\n    audits: [],\r\n    totalItems: 0\r\n};\r\n// Reducer\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REQUEST(ACTION_TYPES.FETCH_METRICS):\r\n        case REQUEST(ACTION_TYPES.FETCH_THREAD_DUMP):\r\n        case REQUEST(ACTION_TYPES.FETCH_LOGS):\r\n        case REQUEST(ACTION_TYPES.FETCH_CONFIGURATIONS):\r\n        case REQUEST(ACTION_TYPES.FETCH_ENV):\r\n        case REQUEST(ACTION_TYPES.FETCH_AUDITS):\r\n        case REQUEST(ACTION_TYPES.FETCH_HEALTH):\r\n            return Object.assign({}, state, { errorMessage: null, loading: true });\r\n        case FAILURE(ACTION_TYPES.FETCH_METRICS):\r\n        case FAILURE(ACTION_TYPES.FETCH_THREAD_DUMP):\r\n        case FAILURE(ACTION_TYPES.FETCH_LOGS):\r\n        case FAILURE(ACTION_TYPES.FETCH_CONFIGURATIONS):\r\n        case FAILURE(ACTION_TYPES.FETCH_ENV):\r\n        case FAILURE(ACTION_TYPES.FETCH_AUDITS):\r\n        case FAILURE(ACTION_TYPES.FETCH_HEALTH):\r\n            return Object.assign({}, state, { loading: false, errorMessage: action.payload });\r\n        case SUCCESS(ACTION_TYPES.FETCH_METRICS):\r\n            return Object.assign({}, state, { loading: false, metrics: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.FETCH_THREAD_DUMP):\r\n            return Object.assign({}, state, { loading: false, threadDump: action.payload.data });\r\n        case SUCCESS(ACTION_TYPES.FETCH_LOGS):\r\n            return Object.assign({}, state, { loading: false, logs: {\r\n                    loggers: action.payload.data.loggers\r\n                } });\r\n        case SUCCESS(ACTION_TYPES.FETCH_CONFIGURATIONS):\r\n            return Object.assign({}, state, { loading: false, configuration: Object.assign({}, state.configuration, { configProps: action.payload.data }) });\r\n        case SUCCESS(ACTION_TYPES.FETCH_ENV):\r\n            return Object.assign({}, state, { loading: false, configuration: Object.assign({}, state.configuration, { env: action.payload.data }) });\r\n        case SUCCESS(ACTION_TYPES.FETCH_AUDITS):\r\n            return Object.assign({}, state, { loading: false, audits: action.payload.data, totalItems: parseInt(action.payload.headers['x-total-count'], 10) });\r\n        case SUCCESS(ACTION_TYPES.FETCH_HEALTH):\r\n            return Object.assign({}, state, { loading: false, health: action.payload.data });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n// Actions\r\nexport const systemHealth = () => ({\r\n    type: ACTION_TYPES.FETCH_HEALTH,\r\n    payload: axios.get('management/health')\r\n});\r\nexport const systemMetrics = () => ({\r\n    type: ACTION_TYPES.FETCH_METRICS,\r\n    payload: axios.get('management/jhimetrics')\r\n});\r\nexport const systemThreadDump = () => ({\r\n    type: ACTION_TYPES.FETCH_THREAD_DUMP,\r\n    payload: axios.get('management/threaddump')\r\n});\r\nexport const getLoggers = () => ({\r\n    type: ACTION_TYPES.FETCH_LOGS,\r\n    payload: axios.get('management/loggers')\r\n});\r\nexport const changeLogLevel = (name, configuredLevel) => {\r\n    const body = { configuredLevel };\r\n    return (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n        yield dispatch({\r\n            type: ACTION_TYPES.FETCH_LOGS_CHANGE_LEVEL,\r\n            payload: axios.post('management/loggers/' + name, body)\r\n        });\r\n        dispatch(getLoggers());\r\n    });\r\n};\r\nexport const getConfigurations = () => ({\r\n    type: ACTION_TYPES.FETCH_CONFIGURATIONS,\r\n    payload: axios.get('management/configprops')\r\n});\r\nexport const getEnv = () => ({\r\n    type: ACTION_TYPES.FETCH_ENV,\r\n    payload: axios.get('management/env')\r\n});\r\nexport const getAudits = (page, size, sort, fromDate, toDate) => {\r\n    let requestUrl = `management/audits${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\r\n    if (fromDate) {\r\n        requestUrl += `&fromDate=${fromDate}`;\r\n    }\r\n    if (toDate) {\r\n        requestUrl += `&toDate=${toDate}`;\r\n    }\r\n    return {\r\n        type: ACTION_TYPES.FETCH_AUDITS,\r\n        payload: axios.get(requestUrl)\r\n    };\r\n};\r\n",{"version":3,"file":"C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\administration.reducer.ts","sourceRoot":"","sources":["C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\node_modules\\eslint-loader\\index.js!C:\\sepanuevo\\SEPA_APP_REACT\\SEPA_APP_REACT\\sepa\\src\\main\\webapp\\app\\modules\\administration\\administration.reducer.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\n\r\nexport const ACTION_TYPES = {\r\n  FETCH_LOGS: 'administration/FETCH_LOGS',\r\n  FETCH_LOGS_CHANGE_LEVEL: 'administration/FETCH_LOGS_CHANGE_LEVEL',\r\n  FETCH_HEALTH: 'administration/FETCH_HEALTH',\r\n  FETCH_METRICS: 'administration/FETCH_METRICS',\r\n  FETCH_THREAD_DUMP: 'administration/FETCH_THREAD_DUMP',\r\n  FETCH_CONFIGURATIONS: 'administration/FETCH_CONFIGURATIONS',\r\n  FETCH_ENV: 'administration/FETCH_ENV',\r\n  FETCH_AUDITS: 'administration/FETCH_AUDITS'\r\n};\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  errorMessage: null,\r\n  logs: {\r\n    loggers: [] as any[]\r\n  },\r\n  health: {} as any,\r\n  metrics: {} as any,\r\n  threadDump: [],\r\n  configuration: {\r\n    configProps: {} as any,\r\n    env: {} as any\r\n  },\r\n  audits: [],\r\n  totalItems: 0\r\n};\r\n\r\nexport type AdministrationState = Readonly<typeof initialState>;\r\n\r\n// Reducer\r\n\r\nexport default (state: AdministrationState = initialState, action): AdministrationState => {\r\n  switch (action.type) {\r\n    case REQUEST(ACTION_TYPES.FETCH_METRICS):\r\n    case REQUEST(ACTION_TYPES.FETCH_THREAD_DUMP):\r\n    case REQUEST(ACTION_TYPES.FETCH_LOGS):\r\n    case REQUEST(ACTION_TYPES.FETCH_CONFIGURATIONS):\r\n    case REQUEST(ACTION_TYPES.FETCH_ENV):\r\n    case REQUEST(ACTION_TYPES.FETCH_AUDITS):\r\n    case REQUEST(ACTION_TYPES.FETCH_HEALTH):\r\n      return {\r\n        ...state,\r\n        errorMessage: null,\r\n        loading: true\r\n      };\r\n    case FAILURE(ACTION_TYPES.FETCH_METRICS):\r\n    case FAILURE(ACTION_TYPES.FETCH_THREAD_DUMP):\r\n    case FAILURE(ACTION_TYPES.FETCH_LOGS):\r\n    case FAILURE(ACTION_TYPES.FETCH_CONFIGURATIONS):\r\n    case FAILURE(ACTION_TYPES.FETCH_ENV):\r\n    case FAILURE(ACTION_TYPES.FETCH_AUDITS):\r\n    case FAILURE(ACTION_TYPES.FETCH_HEALTH):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        errorMessage: action.payload\r\n      };\r\n    case SUCCESS(ACTION_TYPES.FETCH_METRICS):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        metrics: action.payload.data\r\n      };\r\n    case SUCCESS(ACTION_TYPES.FETCH_THREAD_DUMP):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        threadDump: action.payload.data\r\n      };\r\n    case SUCCESS(ACTION_TYPES.FETCH_LOGS):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        logs: {\r\n          loggers: action.payload.data.loggers\r\n        }\r\n      };\r\n    case SUCCESS(ACTION_TYPES.FETCH_CONFIGURATIONS):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        configuration: {\r\n          ...state.configuration,\r\n          configProps: action.payload.data\r\n        }\r\n      };\r\n    case SUCCESS(ACTION_TYPES.FETCH_ENV):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        configuration: {\r\n          ...state.configuration,\r\n          env: action.payload.data\r\n        }\r\n      };\r\n    case SUCCESS(ACTION_TYPES.FETCH_AUDITS):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        audits: action.payload.data,\r\n        totalItems: parseInt(action.payload.headers['x-total-count'], 10)\r\n      };\r\n    case SUCCESS(ACTION_TYPES.FETCH_HEALTH):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        health: action.payload.data\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Actions\r\n\r\nexport const systemHealth = () => ({\r\n  type: ACTION_TYPES.FETCH_HEALTH,\r\n  payload: axios.get('management/health')\r\n});\r\n\r\nexport const systemMetrics = () => ({\r\n  type: ACTION_TYPES.FETCH_METRICS,\r\n  payload: axios.get('management/jhimetrics')\r\n});\r\n\r\nexport const systemThreadDump = () => ({\r\n  type: ACTION_TYPES.FETCH_THREAD_DUMP,\r\n  payload: axios.get('management/threaddump')\r\n});\r\n\r\nexport const getLoggers = () => ({\r\n  type: ACTION_TYPES.FETCH_LOGS,\r\n  payload: axios.get('management/loggers')\r\n});\r\n\r\nexport const changeLogLevel = (name, configuredLevel) => {\r\n  const body = { configuredLevel };\r\n  return async dispatch => {\r\n    await dispatch({\r\n      type: ACTION_TYPES.FETCH_LOGS_CHANGE_LEVEL,\r\n      payload: axios.post('management/loggers/' + name, body)\r\n    });\r\n    dispatch(getLoggers());\r\n  };\r\n};\r\n\r\nexport const getConfigurations = () => ({\r\n  type: ACTION_TYPES.FETCH_CONFIGURATIONS,\r\n  payload: axios.get('management/configprops')\r\n});\r\n\r\nexport const getEnv = () => ({\r\n  type: ACTION_TYPES.FETCH_ENV,\r\n  payload: axios.get('management/env')\r\n});\r\n\r\nexport const getAudits = (page, size, sort, fromDate, toDate) => {\r\n  let requestUrl = `management/audits${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\r\n  if (fromDate) {\r\n    requestUrl += `&fromDate=${fromDate}`;\r\n  }\r\n  if (toDate) {\r\n    requestUrl += `&toDate=${toDate}`;\r\n  }\r\n  return {\r\n    type: ACTION_TYPES.FETCH_AUDITS,\r\n    payload: axios.get(requestUrl)\r\n  };\r\n};\r\n"]}]}